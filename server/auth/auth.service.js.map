{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","hasRole","signToken","setTokenCookie","util","require","validateJwt","secret","secrets","session","use","req","res","next","query","hasOwnProperty","headers","authorization","access_token","cookies","token","findById","user","_id","exec","then","status","end","catch","err","roles","length","Error","meetsRequirements","i","role","send","id","sign","expiresIn","cookie","redirect"],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\nimport config from '../config/environment';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport compose from 'composable-middleware';\nimport User from '../api/user/user.model';\n\nconst util = require('util');\n\nvar validateJwt = expressJwt({\n  secret: config.secrets.session\n});\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nexport function isAuthenticated() {\n  return compose()\n    // Validate jwt\n    .use(function(req, res, next) {\n      // allow access_token to be passed through query parameter as well\n    //   console.log(util.inspect(req, {showHidden: false, depth: null}));\n    // do not remove consol.log not work//so for debugging keep it\n      if(req.query && req.query.hasOwnProperty('access_token')) {\n        req.headers.authorization = `Bearer ${req.query.access_token}`;\n      }\n     // IE11 forgets to set Authorization header sometimes. Pull from cookie instead.\n      if(req.query && typeof req.headers.authorization === 'undefined') {\n          //     console.log(\"req:\" + JSON.stringify(req,null, 5));\n           \n             //  console.log(JSON.stringify(myObject, null, 4));\n        req.headers.authorization = `Bearer ${req.cookies.token}`;\n      }\n      return validateJwt(req, res, next);\n    })\n    // Attach user to request\n    .use(function(req, res, next) {\n      User.findById(req.user._id).exec()\n        .then(user => {\n          if(!user) {\n            return res.status(401).end();\n          }\n          req.user = user;\n          next();\n        })\n        .catch(err => next(err));\n    });\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\nexport function hasRole(roles) {\n  if(roles && roles.length==0) {\n    throw new Error('Required role needs to be set');\n  }\n  return compose()\n    .use(isAuthenticated())\n    .use(function meetsRequirements(req, res, next) {\n      for (let i=0; i< roles.length; i++) {\n          if (roles[i] == req.user.role)\n             return next();\n      }\n         return res.status(403).send('Forbidden');\n    });\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nexport function signToken(id, role) {\n  return jwt.sign({ _id: id, role }, config.secrets.session, {\n    expiresIn: 60 * 60 * 5\n  });\n}\n\n/**\n * Set token cookie directly for oAuth strategies\n */\nexport function setTokenCookie(req, res) {\n  if(!req.user) {\n    return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\n  }\n  var token = signToken(req.user._id, req.user.role);\n  res.cookie('token', token);\n  res.redirect('/');\n}\n"]}