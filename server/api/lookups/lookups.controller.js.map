{"version":3,"sources":["api/lookups/lookups.controller.js"],"names":["index","create","respondWithResult","res","statusCode","entity","status","json","handleEntityNotFound","end","handleError","err","send","req","query","rev","undefined","console","log","find","select","exec","lkups","next","lookups","error","body","_id","findOneAndUpdate","new","upsert","setDefaultsOnInsert","runValidators","then","catch"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;;QA+BgBA,K,GAAAA,K;QAuBAC,M,GAAAA,M;;AApDhB;;;;;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AAC1CA,cAAaA,cAAc,GAA3B;AACA,QAAO,UAASC,MAAT,EAAiB;AACtB,MAAGA,MAAH,EAAW;AACT,UAAOF,IAAIG,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4BF,MAA5B,CAAP;AACD;AACD,SAAO,IAAP;AACD,EALD;AAMD;AACD,SAASG,oBAAT,CAA8BL,GAA9B,EAAmC;AACjC,QAAO,UAASE,MAAT,EAAiB;AACtB,MAAG,CAACA,MAAJ,EAAY;AACVF,OAAIG,MAAJ,CAAW,GAAX,EAAgBG,GAAhB;AACA,UAAO,IAAP;AACD;AACD,SAAOJ,MAAP;AACD,EAND;AAOD;;AAED,SAASK,WAAT,CAAqBP,GAArB,EAA0BC,UAA1B,EAAsC;AACpCA,cAAaA,cAAc,GAA3B;AACA,QAAO,UAASO,GAAT,EAAc;AACnBR,MAAIG,MAAJ,CAAWF,UAAX,EAAuBQ,IAAvB,CAA4BD,GAA5B;AACD,EAFD;AAGD;;AAED;AACO,SAASX,KAAT,CAAea,GAAf,EAAoBV,GAApB,EAAyB;AAC9B,KAAIU,IAAIC,KAAJ,CAAUC,GAAV,IAAiBC,SAArB,EAAgC;AAC/BC,UAAQC,GAAR,CAAY,0BAA0BL,IAAIC,KAAJ,CAAUC,GAAhD;AACA,MAAID,QAAQ,kBAAQK,IAAR,CAAa,EAAEJ,KAAKF,IAAIC,KAAJ,CAAUC,GAAjB,EAAb,EAAqCK,MAArC,CAA4C,OAA5C,CAAZ;AACAN,QAAMO,IAAN,CAAW,UAAUV,GAAV,EAAeW,KAAf,EAAsB;AAChC,OAAIX,GAAJ,EAAS,OAAOY,KAAKZ,GAAL,CAAP;AACTR,OAAII,IAAJ,CAASe,MAAM,CAAN,CAAT;AACA,GAHD;AAKA,EARD,MASK;AACJ,oBAAQH,IAAR,CAAa,EAAb,EAAiB,UAACR,GAAD,EAAMa,OAAN,EAAkB;AAClCP,WAAQC,GAAR,CAAY,2BAAZ;AACA,OAAIP,GAAJ,EAAS;AACRR,QAAIS,IAAJ,CAAS,GAAT,EAAc,EAAEa,OAAOd,GAAT,EAAd;AACA;AACDR,OAAII,IAAJ,CAASiB,OAAT;AACAP,WAAQC,GAAR,CAAY,yBAAZ;AAEA,GARD;AASA;AACF;;AAEM,SAASjB,MAAT,CAAgBY,GAAhB,EAAqBV,GAArB,EAA0B;AAChCc,SAAQC,GAAR,CAAY,iBAAiBL,IAAIa,IAAJ,CAASC,GAAtC;AACD;AACC;AACA;AACC,QAAO,kBAAQC,gBAAR,CAAyB,EAAEb,KAAK,CAAP,EAAzB,EAAoCF,IAAIa,IAAxC,EAA8C,EAACG,KAAK,IAAN,EAAYC,QAAQ,IAApB,EAA0BC,qBAAqB,IAA/C,EAAqDC,eAAe,IAApE,EAA9C,EAAyHX,IAAzH,GACJY,IADI,CACC/B,kBAAkBC,GAAlB,CADD,EAEJ+B,KAFI,CAEExB,YAAYP,GAAZ,CAFF,CAAP;AAGD;;AAED","file":"lookups.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/categories              ->  index\n * POST    /api/categories              ->  create\n * GET     /api/categories/:id          ->  show\n * PUT     /api/categories/:id          ->  upsert\n * PATCH   /api/categories/:id          ->  patch\n * DELETE  /api/categories/:id          ->  destroy\n */\n\n'use strict';\n\nimport Lookups from './lookups.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Categorys\nexport function index(req, res) {\n  if (req.query.rev != undefined) {\n\t\t\tconsole.log('..get lookups rev#...' + req.query.rev);\n\t\t\tvar query = Lookups.find({ rev: req.query.rev }).select('lkups');\n\t\t\tquery.exec(function (err, lkups) {\n\t\t\t\tif (err) return next(err);\n\t\t\t\tres.json(lkups[0]);\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tLookups.find({}, (err, lookups) => {\n\t\t\t\tconsole.log('..questions.find start...');\n\t\t\t\tif (err) {\n\t\t\t\t\tres.send(500, { error: err });\n\t\t\t\t}\n\t\t\t\tres.json(lookups);\n\t\t\t\tconsole.log('..questions.find end...');\n\n\t\t\t});\n\t\t}\n}\n\nexport function create(req, res) {\n\tconsole.log('qn upsert...' + req.body._id);\n//  if(req.body._id) {\n //   delete req.body._id;\n // }\n  return Lookups.findOneAndUpdate({ rev: 0}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n/*\n// Creates a new Category in the DB\nexport function create(req, res) {\ttry {\n\t\t\tconsole.log('lookups post...' + JSON.stringify(req.body));\n\t\t\tLookups.findOne({ rev: 0 }, (err, lookups) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('lookups post error...' + req.body._id);\n\t\t\t\t\tres.send(err);\n\t\t\t\t}\n\t\t\t\tlookups.lkups = undefined;\n\t\t\t\tlookups.lkups = req.body.lkups;\n\t\t\t\tlookups.save(function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tconsole.log('lookups post error 2...' + req.body._id);\n\t\t\t\t\t\tres.send(err);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('lookups post success...');\n\t\t\t\t\t//res.json(result);\n\t\t\t\t\tres.json({ message: 'Lookups updated!' });\n\t\t\t\t}); //end of save\n\t\t\t}); //end of fine one\n\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log('lookups post exception...' + JSON.stringify(e));\n\t\t}\n\t\t*/\n\n"]}