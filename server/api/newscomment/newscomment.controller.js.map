{"version":3,"sources":["api/newscomment/newscomment.controller.js"],"names":["index","newscomments","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","populate","exec","catch","params","id","findById","newscomment","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"newscomment.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/newscomments              ->  index\n * POST    /api/newscomments              ->  create\n * GET     /api/newscomments/:id          ->  show\n * PUT     /api/newscomments/:id          ->  upsert\n * PATCH   /api/newscomments/:id          ->  patch\n * DELETE  /api/newscomments/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Newscomment from './newscomment.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Newscomments\nexport function index(req, res) {\n  return Newscomment.find().populate('user newsId','-salt -password').exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a list of Newscomments\nexport function newscomments(req, res) {\n  return Newscomment.find({'newsId':req.params.id},{}).populate('user newsId','-salt -password').exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n// Gets a single Newscomment from the DB\nexport function show(req, res) {\n  return Newscomment.findById(req.params.id).populate('user newsId','-salt -password').exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Newscomment in the DB\nexport function create(req, res) {\n let newscomment = new Newscomment(req.body);\n newscomment.save(function(err){\n  if(err){\n    return handleError(res);\n  }\n  else{\n    res.json(newscomment)\n  }\n })\n}\n\n// Upserts the given Newscomment in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Newscomment.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Newscomment in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Newscomment.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Newscomment from the DB\nexport function destroy(req, res) {\n  return Newscomment.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}