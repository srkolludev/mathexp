{"version":3,"sources":["api/message/message.controller.js"],"names":["userIndex","userChat","sellerIndex","updateCount","sellerChat","count","create","markRead","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","user","result","flag","setValue","slot","senderId","_id","newObj","newArray","find","distinct","exec","messages","length","message","i","lastMsg","lastSellerMsgIndex","lastMsgData","findById","storeName","email","users","push","j","k","x","toString","y","lastMessage","receiverId","params","id","sort","populate","catch","name","imageUrl","lastUserMsgIndex","lastmsgTime","createdAt","console","log","a","b","mongoose","require","Types","ObjectId","update","$set","msgs","sender","receiver","resData","Id","flagval","senderRead","body","timestamp","Date","parse","sentBy","receiverRead","fileUrl","undefined","fileType","fileName"],"mappings":";AACA;;;;;;;;;;;;;;QA4DgBA,S,GAAAA,S;QAmFAC,Q,GAAAA,Q;QAkBAC,W,GAAAA,W;QAiGAC,W,GAAAA,W;QAoCAC,U,GAAAA,U;QAmEAC,K,GAAAA,K;QA4HAC,M,GAAAA,M;QAqCAC,Q,GAAAA,Q;;AAxgBhB;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AAC1CA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASC,MAAT,EAAiB;AACtB,QAAGA,MAAH,EAAW;AACT,aAAOF,IAAIG,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4BF,MAA5B,CAAP;AACD;AACD,WAAO,IAAP;AACD,GALD;AAMD;;AAED,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAO,UAASJ,MAAT,EAAiB;AACtB,QAAI;AACF,8BAAUK,KAAV,CAAgBL,MAAhB,EAAwBI,OAAxB,EAAiC,YAAa,IAA9C;AACD,KAFD,CAEE,OAAME,GAAN,EAAW;AACX,aAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACD;;AAED,WAAON,OAAOQ,IAAP,EAAP;AACD,GARD;AASD;;AAED,SAASC,YAAT,CAAsBX,GAAtB,EAA2B;AACzB,SAAO,UAASE,MAAT,EAAiB;AACtB,QAAGA,MAAH,EAAW;AACT,aAAOA,OAAOU,MAAP,GACJC,IADI,CACC,YAAM;AACVb,YAAIG,MAAJ,CAAW,GAAX,EAAgBW,GAAhB;AACD,OAHI,CAAP;AAID;AACF,GAPD;AAQD;;AAED,SAASC,oBAAT,CAA8Bf,GAA9B,EAAmC;AACjC,SAAO,UAASE,MAAT,EAAiB;AACtB,QAAG,CAACA,MAAJ,EAAY;AACVF,UAAIG,MAAJ,CAAW,GAAX,EAAgBW,GAAhB;AACA,aAAO,IAAP;AACD;AACD,WAAOZ,MAAP;AACD,GAND;AAOD;;AAED,SAASc,WAAT,CAAqBhB,GAArB,EAA0BC,UAA1B,EAAsC;AACpCA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASO,GAAT,EAAc;AACnBR,QAAIG,MAAJ,CAAWF,UAAX,EAAuBgB,IAAvB,CAA4BT,GAA5B;AACD,GAFD;AAGD;;AAED;;AAEA;AACA;AACO,SAASjB,SAAT,CAAmB2B,GAAnB,EAAwBlB,GAAxB,EAA4BmB,IAA5B,EAAkC;AACvC,MAAIC,SAAS,EAAb;AACA,MAAIC,OAAO,CAAX;AACA,MAAIC,WAAS,CAAb;AACA,MAAIC,IAAJ;AACA,MAAIC,WAAWN,IAAIC,IAAJ,CAASM,GAAxB;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,WAAW,EAAf;AACA,oBAAQC,IAAR,CAAa,EAAC,UAASJ,QAAV,EAAb,EAAkCK,QAAlC,CAA2C,UAA3C,EAAuDC,IAAvD,CAA4D,UAAUtB,GAAV,EAAeuB,QAAf,EAAwB;AAClF,QAAGvB,GAAH,EACA;AACE,aAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD;AACD,QAAG+B,SAASC,MAAT,IAAmB,CAAtB,EAAwB;AACtB,aAAOhC,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1BgB,iBAAS;AADiB,OAArB,CAAP;AAGD,KAJD,MAMA;AAAA,iCACUC,CADV;AAGI,0BAAQN,IAAR,CAAa,EAAC,YAAWG,SAASG,CAAT,CAAZ,EAAwB,UAASV,QAAjC,EAAb,EAAyDM,IAAzD,CAA8D,UAAStB,GAAT,EAAa2B,OAAb,EAAqB;AACjF,cAAG3B,GAAH,EAAO;AACL,mBAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,WAFD,MAGI;AACF,gBAAIoC,qBAAqBD,QAAQH,MAAR,GAAe,CAAxC;AACA,gBAAIK,cAAcF,QAAQC,kBAAR,EAA4BH,OAA9C;AACA,2BAAKK,QAAL,CAAcP,SAASG,CAAT,CAAd,EAA0B,EAACK,WAAU,CAAX,EAAaC,OAAM,CAAnB,EAA1B,EAAiDV,IAAjD,CAAsD,UAAStB,GAAT,EAAaiC,KAAb,EAAmB;AACvE,kBAAGjC,GAAH,EACA;AACE,uBAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,eAHD,MAII;AACFoB,uBAAOsB,IAAP,CAAYD,KAAZ;AACA,oBAAGrB,OAAOY,MAAP,KAAkBD,SAASC,MAA9B,EACA;AAAA,+CACUW,CADV;AAGI,sCAAQ/C,KAAR,CAAc,EAAC,UAAS4B,QAAV,EAAmB,YAAWO,SAASY,CAAT,CAA9B,EAA0C,cAAa,KAAvD,EAAd,EAA6Eb,IAA7E,CAAkF,UAAUtB,GAAV,EAAeZ,KAAf,EAAqB;AACrG,0BAAGY,GAAH,EACA;AACE,+BAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,uBAHD,MAII;AACF,6BAAI,IAAI4C,IAAE,CAAV,EAAYA,IAAEb,SAASC,MAAvB,EAA8BY,GAA9B,EACA;AACE,8BAAIC,IAAIzB,OAAOwB,CAAP,EAAUnB,GAAV,CAAcqB,QAAd,EAAR;AACA,8BAAIC,IAAIhB,SAASY,CAAT,EAAYG,QAAZ,EAAR;AACA,8BAAGD,MAAME,CAAT,EACA;AACE1B;AACAK,qCAAS;AACPsB,2CAAYX,WADL;AAEPZ,mCAAKL,OAAOwB,CAAP,EAAUnB,GAFR;AAGPc,yCAAWnB,OAAOwB,CAAP,EAAUL,SAHd;AAIPC,qCAAOpB,OAAOwB,CAAP,EAAUJ,KAJV;AAKP5C,qCAAOA;AALA,6BAAT;AAOA+B,qCAASe,IAAT,CAAchB,MAAd;AACD;AACD,8BAAGL,SAASU,SAASC,MAAlB,IAA4BV,aAAa,CAA5C,EACA;AACEtB,gCAAII,IAAJ,CAASuB,QAAT;AACAL,uCAAW,CAAX;AACD;AACF;AACF;AACF,qBA7BD;AAHJ;;AACE,uBAAI,IAAIqB,IAAE,CAAV,EAAYA,IAAEZ,SAASC,MAAvB,EAA8BW,GAA9B,EACA;AAAA,2BADQA,CACR;AA+BC;AACF;AACF;AACF,aA5CD;AA6CD;AACF,SArDD;AAHJ;;AACE,WAAI,IAAIT,IAAI,CAAZ,EAAcA,IAAEH,SAASC,MAAzB,EAAgCE,GAAhC,EACA;AAAA,cADQA,CACR;AAuDC;AACF;AACF,GAtED;AAuED;;AAGD;AACO,SAAS1C,QAAT,CAAkB0B,GAAlB,EAAuBlB,GAAvB,EAA4B;AACnC,MAAIwB,WAAWN,IAAIC,IAAJ,CAASM,GAAxB;AACA,MAAIwB,aAAa/B,IAAIgC,MAAJ,CAAWC,EAA5B;;AAEE,SAAO,kBAAQvB,IAAR,CAAa,EAAC,UAASJ,QAAV,EAAmB,YAAWyB,UAA9B,EAAb,EAAwDG,IAAxD,CAA6D,CAAC,CAAC,WAAD,EAAc,CAAd,CAAD,CAA7D,EAAiFC,QAAjF,CAA0F,aAA1F,EAAwG,YAAxG,EAAsHvB,IAAtH,GACJjB,IADI,CACCE,qBAAqBf,GAArB,CADD,EAEJa,IAFI,CAECd,kBAAkBC,GAAlB,CAFD,EAGJsD,KAHI,CAGEtC,YAAYhB,GAAZ,CAHF,CAAP;AAKD;;AAED;;AAGA;;;AAGA;AACO,SAASP,WAAT,CAAqByB,GAArB,EAA0BlB,GAA1B,EAA8BmB,IAA9B,EAAoC;AACzC,MAAIC,SAAS,EAAb;AACA,MAAIC,OAAO,CAAX;AACA,MAAIC,WAAS,CAAb;AACA,MAAIC,IAAJ;AACA,MAAI0B,aAAa/B,IAAIC,IAAJ,CAASM,GAA1B;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,WAAW,EAAf;AACA,oBAAQC,IAAR,CAAa,EAAC,YAAWqB,UAAZ,EAAb,EAAsCpB,QAAtC,CAA+C,QAA/C,EAAyDC,IAAzD,CAA8D,UAAUtB,GAAV,EAAeuB,QAAf,EAAwB;AACpF,QAAGvB,GAAH,EACA;AACE,aAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD;AACD,QAAG+B,SAASC,MAAT,IAAmB,CAAtB,EAAwB;AACtB,aAAOhC,IAAIiB,IAAJ,CAAS;AACdgB,iBAAS;AADK,OAAT,CAAP;AAGD,KAJD,MAMA;AACE,WAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAEH,SAASC,MAAzB,EAAgCE,GAAhC,EACA;AACE,uBAAKI,QAAL,CAAcP,SAASG,CAAT,CAAd,EAA0B,EAACqB,MAAK,CAAN,EAAQf,OAAM,CAAd,EAAgBgB,UAAS,CAAzB,EAA1B,EAAuD1B,IAAvD,CAA4D,UAAStB,GAAT,EAAaiC,KAAb,EAAmB;AAC7E,cAAGjC,GAAH,EACA;AACE,mBAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,WAHD,MAII;AACFoB,mBAAOsB,IAAP,CAAYD,KAAZ;AACA,gBAAGrB,OAAOY,MAAP,KAAkBD,SAASC,MAA9B,EACA;AAAA,2CACUW,CADV;AAGI,kCAAQ/C,KAAR,CAAc,EAAC,YAAWqD,UAAZ,EAAuB,UAASlB,SAASY,CAAT,CAAhC,EAA4C,gBAAe,KAA3D,EAAd,EAAiFb,IAAjF,CAAsF,UAAUtB,GAAV,EAAeZ,KAAf,EAAqB;AACzG,sBAAGY,GAAH,EACA;AACE,2BAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,mBAHD,MAII;AACF,sCAAQ4B,IAAR,CAAa,EAAC,YAAWqB,UAAZ,EAAuB,UAASlB,SAASY,CAAT,CAAhC,EAAb,EAA2Db,IAA3D,CAAgE,UAAStB,GAAT,EAAa2B,OAAb,EAAqB;AACnF,0BAAG3B,GAAH,EAAO;AACL,+BAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,uBAFD,MAGI;AACF,4BAAIyD,mBAAmBtB,QAAQH,MAAR,GAAe,CAAtC;AACA,4BAAIK,cAAcF,QAAQsB,gBAAR,EAA0BxB,OAA5C;AACA,4BAAIyB,cAAcvB,QAAQsB,gBAAR,EAA0BE,SAA5C;AACA,6BAAI,IAAIf,IAAE,CAAV,EAAYA,IAAEb,SAASC,MAAvB,EAA8BY,GAA9B,EAEA;AACEgB,kCAAQC,GAAR,CAAY,yBAAezC,OAAOwB,CAAP,CAAf,IAA0B,QAAtC;AACA,8BAAGxB,OAAOwB,CAAP,KAAY,IAAf,EAAoB;AACpB,gCAAIC,IAAIzB,OAAOwB,CAAP,EAAUnB,GAAV,CAAcqB,QAAd,EAAR;AACA,gCAAIC,IAAIhB,SAASY,CAAT,EAAYG,QAAZ,EAAR;AACD;AACC,8BAAGD,MAAME,CAAT,EACA;AACE1B;AACA,gCAAGD,OAAOwB,CAAP,KAAY,IAAf,EAAoB;AACpBlB,uCAAS;AACPsB,6CAAYX,WADL;AAEPZ,qCAAKL,OAAOwB,CAAP,EAAUnB,GAFR;AAGP8B,sCAAMnC,OAAOwB,CAAP,EAAUW,IAHT;AAIPf,uCAAOpB,OAAOwB,CAAP,EAAUJ,KAJV;AAKPgB,0CAAUpC,OAAOwB,CAAP,EAAUY,QALb;AAMP5D,uCAAOA,KANA;AAOP8D,6CAAYA;AAPL,+BAAT;AASD;AACC/B,qCAASe,IAAT,CAAchB,MAAd;AACH;AACC,8BAAGL,SAASU,SAASC,MAAlB,IAA4BV,aAAa,CAA5C,EACA;AACEK,qCAASyB,IAAT,CAAc,UAAUU,CAAV,EAAaC,CAAb,EAAgB;AAC5B,qCAAOA,EAAEL,WAAF,GAAgBI,EAAEJ,WAAzB;AACD,6BAFD;AAGA1D,gCAAII,IAAJ,CAASuB,QAAT;AACAL,uCAAW,CAAX;AACD;AACF;AACF;AACF,qBA1CD;AA2CD;AACF,iBAlDD;AAHJ;;AACE,mBAAI,IAAIqB,IAAE,CAAV,EAAYA,IAAEZ,SAASC,MAAvB,EAA8BW,GAA9B,EACA;AAAA,uBADQA,CACR;AAoDC;AACF;AACF;AACF,SAjED;AAkED;AACF;AACF,GAlFD;AAmFD;;AAID;AACA;AACO,SAASjD,WAAT,CAAqBwB,GAArB,EAA0BlB,GAA1B,EAA+B;AACpC,MAAIkC,IAAI,CAAR;AACA,MAAI8B,WAAWC,QAAQ,UAAR,CAAf;AACA,MAAIhB,aAAce,SAASE,KAAT,CAAeC,QAAf,CAAwBjD,IAAIC,IAAJ,CAASM,GAAjC,CAAlB;AACA,MAAID,WAAYwC,SAASE,KAAT,CAAeC,QAAf,CAAwBjD,IAAIgC,MAAJ,CAAWC,EAAnC,CAAhB;AACA,oBAAQiB,MAAR,CAAe,EAAC,YAAWnB,UAAZ,EAAuB,UAASzB,QAAhC,EAAyC,gBAAe,KAAxD,EAAf,EAA8E,EAAC6C,MAAK,EAAC,gBAAe,IAAhB,EAAN,EAA9E,EAA2G,EAAC,SAAQ,IAAT,EAA3G,EAA2HvC,IAA3H,CAAgI,UAAUtB,GAAV,EAAeyB,OAAf,EAAwB;AACtJ,QAAIzB,GAAJ,EAAS;AACP,aAAOQ,YAAYhB,GAAZ,EAAiBQ,GAAjB,CAAP;AACD;AACD,QAAI,CAACyB,OAAL,EAAc;AACZ,aAAOjC,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB,WAArB,CAAP;AACD;AACD,sBAAQrB,KAAR,CAAc,EAAC,YAAWqD,UAAZ,EAAuB,gBAAe,KAAtC,EAAd,EAA4DnB,IAA5D,CAAiE,UAAUtB,GAAV,EAAeuB,QAAf,EAAyB;AACxF,UAAIvB,GAAJ,EAAS;AACP,eAAOQ,YAAYhB,GAAZ,EAAiBQ,GAAjB,CAAP;AACD;AACDR,UAAII,IAAJ,CAAS2B,QAAT;AACD,KALD;AAMD,GAbD;AAcC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AAED;AACO,SAASpC,UAAT,CAAoBuB,GAApB,EAAyBlB,GAAzB,EAA8B;AACnC,MAAIiD,aAAa/B,IAAIC,IAAJ,CAASM,GAA1B;AACA,MAAID,WAAWN,IAAIgC,MAAJ,CAAWC,EAA1B;AACA,oBAAQvB,IAAR,CAAa,EAAC,UAASJ,QAAV,EAAmB,YAAWyB,UAA9B,EAAb,EAAwDG,IAAxD,CAA6D,CAAC,CAAC,WAAD,EAAc,CAAd,CAAD,CAA7D,EAAiFtB,IAAjF,CAAsF,UAAStB,GAAT,EAAa8D,IAAb,EAAkB;AACtG,QAAG9D,GAAH,EAAO;AACL,aAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,KAFD,MAGI;AACF;AACA,qBAAKsC,QAAL,CAAcd,QAAd,EAAuB,qBAAvB,EAA8CM,IAA9C,CAAmD,UAAStB,GAAT,EAAa+D,MAAb,EAAoB;AACrE,YAAG/D,GAAH,EAAO;AACL,iBAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,SAFD,MAGI;AACF,yBAAKsC,QAAL,CAAcW,UAAd,EAAyB,qBAAzB,EAAgDnB,IAAhD,CAAqD,UAAStB,GAAT,EAAagE,QAAb,EAAsB;AACzE,gBAAGhE,GAAH,EAAO;AACL,qBAAOQ,YAAYR,GAAZ,EAAgBR,GAAhB,CAAP;AACD,aAFD,MAGI;AACJ,kBAAIyE,UAAQ;AACVF,wBAAOA,MADG;AAEVC,0BAASA,QAFC;AAGVzC,0BAASuC;AAHC,eAAZ;AAKAtE,kBAAII,IAAJ,CAASqE,OAAT;AACC;AACF,WAZD;AAaD;AACF,OAnBD;AAoBD;AACF,GA3BD;AA4BD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS7E,KAAT,CAAesB,GAAf,EAAoBlB,GAApB,EAAyB;AAC9B,MAAIJ,QAAQ,CAAZ;AACA,MAAI8E,KAAKxD,IAAIC,IAAJ,CAASM,GAAlB;AACA,MAAIkD,UAAUzD,IAAIgC,MAAJ,CAAW7B,IAAzB;AACA;AACA,MAAGsD,WAAW,CAAd,EACA;AACE,QAAIvD,SAAS,EAAb;AACA,QAAIC,OAAO,CAAX;AACA,QAAIC,WAAS,CAAb;AACA,QAAIC,IAAJ;AACA,QAAI0B,aAAa/B,IAAIC,IAAJ,CAASM,GAA1B;AACA,QAAIC,SAAS,EAAb;AACA,QAAIC,WAAW,EAAf;AACA,sBAAQC,IAAR,CAAa,EAAC,YAAWqB,UAAZ,EAAb,EAAsCpB,QAAtC,CAA+C,QAA/C,EAAyDC,IAAzD,CAA8D,UAAUtB,GAAV,EAAeuB,QAAf,EAAwB;AACpF,UAAGvB,GAAH,EACA;AACE,eAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1BgB,mBAAS;AADiB,SAArB,CAAP;AAGD;AACD,UAAGF,SAASC,MAAT,IAAmB,CAAtB,EAAwB;AACtB,eAAOhC,IAAIiB,IAAJ,CAAS;AACdgB,mBAAS;AADK,SAAT,CAAP;AAGD,OAJD,MAMA;AACE,aAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAEH,SAASC,MAAzB,EAAgCE,GAAhC,EACA;AACE,yBAAKI,QAAL,CAAcP,SAASG,CAAT,CAAd,EAA0B,EAACqB,MAAK,CAAN,EAAQf,OAAM,CAAd,EAA1B,EAA4CV,IAA5C,CAAiD,UAAStB,GAAT,EAAaiC,KAAb,EAAmB;AAClE,gBAAGjC,GAAH,EACA;AACE,qBAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1BgB,yBAAS;AADiB,eAArB,CAAP;AAGD,aALD,MAMI;AACFb,qBAAOsB,IAAP,CAAYD,KAAZ;AACA,kBAAGrB,OAAOY,MAAP,KAAkBD,SAASC,MAA9B,EACA;AAAA,6CACUW,CADV;AAGI,oCAAQ/C,KAAR,CAAc,EAAC,YAAWqD,UAAZ,EAAuB,UAASlB,SAASY,CAAT,CAAhC,EAA4C,gBAAe,KAA3D,EAAd,EAAiFb,IAAjF,CAAsF,UAAUtB,GAAV,EAAeZ,KAAf,EAAqB;AACzG,wBAAGY,GAAH,EACA;AACE,6BAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1BgB,iCAAS;AADiB,uBAArB,CAAP;AAGD,qBALD,MAMI;AACF,wCAAQL,IAAR,CAAa,EAAC,YAAWqB,UAAZ,EAAuB,UAASlB,SAASY,CAAT,CAAhC,EAAb,EAA2Db,IAA3D,CAAgE,UAAStB,GAAT,EAAa2B,OAAb,EAAqB;AACnF,4BAAG3B,GAAH,EAAO;AACLR,8BAAIiB,IAAJ,CAAS;AACPgB,qCAAQ;AADD,2BAAT;AAGD,yBAJD,MAKI;AACF,8BAAIwB,mBAAmBtB,QAAQH,MAAR,GAAe,CAAtC;AACA,8BAAIK,cAAcF,QAAQsB,gBAAR,EAA0BxB,OAA5C;AACA,8BAAIyB,cAAcvB,QAAQsB,gBAAR,EAA0BE,SAA5C;AACA,+BAAI,IAAIf,IAAE,CAAV,EAAYA,IAAEb,SAASC,MAAvB,EAA8BY,GAA9B,EAEA;AACEgB,oCAAQC,GAAR,CAAY,yBAAezC,OAAOwB,CAAP,CAAf,IAA0B,QAAtC;AACA,gCAAGxB,OAAOwB,CAAP,KAAY,IAAf,EAAoB;AACpB,kCAAIC,IAAIzB,OAAOwB,CAAP,EAAUnB,GAAV,CAAcqB,QAAd,EAAR;AACA,kCAAIC,IAAIhB,SAASY,CAAT,EAAYG,QAAZ,EAAR;AACD;AACC,gCAAGD,MAAME,CAAT,EACA;AACE1B;AACA,kCAAGD,OAAOwB,CAAP,KAAY,IAAf,EAAoB;AACpBlB,yCAAS;AACPsB,+CAAYX,WADL;AAEPZ,uCAAKL,OAAOwB,CAAP,EAAUnB,GAFR;AAGP8B,wCAAMnC,OAAOwB,CAAP,EAAUW,IAHT;AAIPf,yCAAOpB,OAAOwB,CAAP,EAAUJ,KAJV;AAKP5C,yCAAOA,KALA;AAMP8D,+CAAYA;AANL,iCAAT;AAQD;AACD,kCAAGhC,OAAO9B,KAAP,GAAa,CAAhB,EAAkB;AAChB+B,yCAASe,IAAT,CAAchB,MAAd;AACD;AACF;AACC,gCAAGL,SAASU,SAASC,MAAlB,IAA4BV,aAAa,CAA5C,EACA;AACEK,uCAASyB,IAAT,CAAc,UAAUU,CAAV,EAAaC,CAAb,EAAgB;AAC5B,uCAAOA,EAAEL,WAAF,GAAgBI,EAAEJ,WAAzB;AACD,+BAFD;AAGA1D,kCAAII,IAAJ,CAASuB,QAAT;AACAL,yCAAW,CAAX;AACA;AAEH;AACF;AACF,uBA9CD;AA+CD;AACF,mBAxDD;AAHJ;;AACE,qBAAI,IAAIqB,IAAE,CAAV,EAAYA,IAAEZ,SAASC,MAAvB,EAA8BW,GAA9B,EACA;AAAA,yBADQA,CACR;AA0DC;AACF;AACF;AACF,WAzED;AA0ED;AACF;AACF,KA5FD;AA6FD;AACD;AACA,MAAGgC,WAAW,CAAd,EACA;;AAEE,sBAAQ/C,IAAR,CAAa,EAAC,UAAS8C,EAAV,EAAb,EAA4B5C,IAA5B,CAAiC,UAAUtB,GAAV,EAAeuB,QAAf,EAAwB;AACvD,WAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,SAASC,MAA7B,EAAqCE,GAArC,EAA0C;AACxC,YAAGH,SAASG,CAAT,EAAY0C,UAAZ,IAA0B,KAA7B,EACA;AACEhF;AACD;AACF;AACDI,UAAII,IAAJ,CAASR,KAAT;AACD,KARD;AASD;AACF;AACD;AACO,SAASC,MAAT,CAAgBqB,GAAhB,EAAqBlB,GAArB,EAA0B;AAC/B4D,UAAQC,GAAR,CAAY,qBAAqB,yBAAe3C,IAAI2D,IAAnB,CAAjC;AACA,MAAIrD,WAAaN,IAAI2D,IAAJ,CAASN,MAA1B;AACA,MAAItB,aAAa/B,IAAI2D,IAAJ,CAASL,QAA1B;AACA,MAAIvC,UAAa,uBAAjB;AACAA,UAAQ6C,SAAR,GAAoBC,KAAKC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAApB;AACA9C,UAAQsC,MAAR,GAAmB/C,QAAnB;AACAS,UAAQuC,QAAR,GAAmBvB,UAAnB;AACA,MAAG/B,IAAI2D,IAAJ,CAASI,MAAT,IAAmB,QAAtB,EACA;AACEhD,YAAQiD,YAAR,GAAuB,KAAvB;AACD;AACD,MAAGhE,IAAI2D,IAAJ,CAASI,MAAT,IAAmB,UAAtB,EACA;AACEhD,YAAQ2C,UAAR,GAAqB,KAArB;AACD;AACD,MAAG1D,IAAI2D,IAAJ,CAASM,OAAT,IAAoBC,SAAvB,EAAiC;AAC/BnD,YAAQkD,OAAR,GAAkBjE,IAAI2D,IAAJ,CAASM,OAA3B;AACAlD,YAAQoD,QAAR,GAAmBnE,IAAI2D,IAAJ,CAASQ,QAA5B;AACApD,YAAQqD,QAAR,GAAmBpE,IAAI2D,IAAJ,CAASS,QAA5B;AACD;AACF;AACCrD,UAAQA,OAAR,GAAkBf,IAAI2D,IAAJ,CAAS5C,OAA3B;AACAA,UAAQgD,MAAR,GAAiB/D,IAAI2D,IAAJ,CAASI,MAA1B;AACA;AACAhD,UAAQvB,IAAR,CAAa,UAAUF,GAAV,EAAe;AAC1B,QAAIA,GAAJ,EAAS;AACP,aAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1BgB,iBAAS;AADiB,OAArB,CAAP;AAGD,KAJD,MAIO;AACLjC,UAAII,IAAJ,CAAS6B,OAAT;AACD;AACF,GARD;AASD;;AAED;AACO,SAASnC,QAAT,CAAkBoB,GAAlB,EAAuBlB,GAAvB,EAA4B;AACjC,MAAIiD,aAAa/B,IAAIC,IAAJ,CAASM,GAA1B;AACA,oBAAQ2C,MAAR,CAAe,EAAC,YAAWnB,UAAZ,EAAuB,gBAAe,KAAtC,EAAf,EAA4D,EAACoB,MAAK,EAAC,gBAAe,IAAhB,EAAN,EAA5D,EAAyF,EAAC,SAAQ,IAAT,EAAzF,EAAyGvC,IAAzG,CAA8G,UAAUtB,GAAV,EAAeyB,OAAf,EAAwB;AACpI,QAAIzB,GAAJ,EAAS;AACP,aAAOQ,YAAYhB,GAAZ,EAAiBQ,GAAjB,CAAP;AACD;AACD,QAAI,CAACyB,OAAL,EAAc;AACZ,aAAOjC,IAAIG,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB,WAArB,CAAP;AACD;AACD,sBAAQrB,KAAR,CAAc,EAAC,YAAWqD,UAAZ,EAAuB,gBAAe,KAAtC,EAAd,EAA4DnB,IAA5D,CAAiE,UAAUtB,GAAV,EAAeuB,QAAf,EAAyB;AACxF,UAAIvB,GAAJ,EAAS;AACP,eAAOQ,YAAYhB,GAAZ,EAAiBQ,GAAjB,CAAP;AACD;AACDR,UAAII,IAAJ,CAAS2B,QAAT;AACD,KALD;AAMD,GAbD;AAcD","file":"message.controller.js","sourcesContent":["\n'use strict';\n \nimport jsonpatch from 'fast-json-patch';\nimport Message from './message.model';\nimport User from '../user/user.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n/**************************   User Access  *****************************/\n\n///////////////////\n//get a list of seller who had ever contacted through a user\nexport function userIndex(req, res,user) {\n  var result = [];\n  var flag = 0;\n  var setValue=1;\n  var slot;\n  var senderId = req.user._id;\n  var newObj = {};\n  var newArray = [];\n  Message.find({'sender':senderId}).distinct('receiver').exec(function (err, messages){\n    if(err)\n    {\n      return handleError(err,res);\n    }\n    if(messages.length == 0){\n      return res.status(404).send({\n        message: 'You do not have any seller who contacted you atleast once.'\n      });\n    }\n    else\n    {\n      for(let i = 0;i<messages.length;i++)\n      {\n        Message.find({'receiver':messages[i],'sender':senderId}).exec(function(err,lastMsg){\n          if(err){\n            return handleError(err,res);\n          }\n          else{\n            let lastSellerMsgIndex = lastMsg.length-1;\n            let lastMsgData = lastMsg[lastSellerMsgIndex].message;\n            User.findById(messages[i],{storeName:1,email:1}).exec(function(err,users){\n              if(err)\n              {\n                return handleError(err,res);\n              }\n              else{\n                result.push(users);\n                if(result.length === messages.length)\n                {\n                  for(let j=0;j<messages.length;j++)\n                  {\n                    Message.count({'sender':senderId,'receiver':messages[j],\"senderRead\":false}).exec(function (err, count){\n                      if(err)\n                      {\n                        return handleError(err,res);\n                      }\n                      else{\n                        for(let k=0;k<messages.length;k++)\n                        {\n                          var x = result[k]._id.toString();\n                          var y = messages[j].toString();\n                          if(x === y)\n                          {\n                            flag++;\n                            newObj = {\n                              lastMessage:lastMsgData,\n                              _id: result[k]._id,\n                              storeName: result[k].storeName,\n                              email: result[k].email,\n                              count: count\n                            }\n                            newArray.push(newObj);\n                          }\n                          if(flag === messages.length && setValue === 1)\n                          {\n                            res.json(newArray);\n                            setValue = 0;\n                          }\n                        }\n                      }\n                    })\n                  }\n                }\n              }\n            })\n          }\n        })\n      }\n    }\n  })\n}\n\n\n// Gets all Messages from the DB of a user and seller(for user only)\nexport function userChat(req, res) {\nlet senderId = req.user._id;\nlet receiverId = req.params.id;\n\n  return Message.find({\"sender\":senderId,\"receiver\":receiverId}).sort([['createdAt', 1]]).populate('user seller','name email').exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n\n}\n\n/**************************   Seller Access  *****************************/\n\n\n////////////////////////////DEVELOPING///////////////////////\n\n\n//get a list of user who had ever contacted through a seller\nexport function sellerIndex(req, res,user) {\n  var result = [];\n  var flag = 0;\n  var setValue=1;\n  var slot;\n  var receiverId = req.user._id;\n  var newObj = {};\n  var newArray = [];\n  Message.find({'receiver':receiverId}).distinct('sender').exec(function (err, messages){\n    if(err)\n    {\n      return handleError(err,res);\n    }\n    if(messages.length == 0){\n      return res.send({\n        message: 'You do not have any user who contacted you atleast once.'\n      });\n    }\n    else\n    { \n      for(let i = 0;i<messages.length;i++)\n      {\n        User.findById(messages[i],{name:1,email:1,imageUrl:1}).exec(function(err,users){\n          if(err)\n          {\n            return handleError(err,res);\n          }\n          else{\n            result.push(users);\n            if(result.length === messages.length)\n            {\n              for(let j=0;j<messages.length;j++)\n              {\n                Message.count({'receiver':receiverId,'sender':messages[j],\"receiverRead\":false}).exec(function (err, count){\n                  if(err)\n                  {\n                    return handleError(err,res);\n                  }\n                  else{\n                    Message.find({'receiver':receiverId,'sender':messages[j]}).exec(function(err,lastMsg){                                                                                                                                                                                                                               \n                      if(err){\n                        return handleError(err,res);\n                      }\n                      else{\n                        let lastUserMsgIndex = lastMsg.length-1;\n                        let lastMsgData = lastMsg[lastUserMsgIndex].message;\n                        let lastmsgTime = lastMsg[lastUserMsgIndex].createdAt;\n                        for(let k=0;k<messages.length;k++)\n\n                        {\n                          console.log(JSON.stringify(result[k])+\"result\")\n                          if(result[k]!= null){\n                          var x = result[k]._id.toString();\n                          var y = messages[j].toString();\n                        }\n                          if(x === y)\n                          {\n                            flag++;\n                            if(result[k]!= null){\n                            newObj = {\n                              lastMessage:lastMsgData,\n                              _id: result[k]._id,\n                              name: result[k].name,\n                              email: result[k].email,\n                              imageUrl: result[k].imageUrl,\n                              count: count,\n                              lastmsgTime:lastmsgTime\n                            }\n                          }\n                            newArray.push(newObj);\n                        }\n                          if(flag === messages.length && setValue === 1)\n                          {\n                            newArray.sort(function (a, b) {\n                              return b.lastmsgTime - a.lastmsgTime;\n                            });\n                            res.json(newArray);\n                            setValue = 0;\n                          }\n                        }\n                      }\n                    })\n                  }\n                })\n              }\n            }\n          }\n        })\n      }\n    }\n  })\n}\n\n\n\n///////////////////////////////////////////////\n//for seller\nexport function updateCount(req, res) {\n  let i = 0;\n  var mongoose = require('mongoose');\n  var receiverId =  mongoose.Types.ObjectId(req.user._id);\n  var senderId =  mongoose.Types.ObjectId(req.params.id);\n  Message.update({\"receiver\":receiverId,\"sender\":senderId,'receiverRead':false},{$set:{'receiverRead':true}},{'multi':true}).exec(function (err, message) {\n    if (err) {\n      return handleError(res, err);\n    }\n    if (!message) {\n      return res.status(404).send('Not Found');\n    }\n    Message.count({\"receiver\":receiverId,\"receiverRead\":false}).exec(function (err, messages) {\n      if (err) {\n        return handleError(res, err);\n      }\n      res.json(messages);\n    })\n  })\n   //  }\n   //  if(i === message.length)\n   //  {\n   //    Message.count({\"receiver\":receiverId,\"receiverRead\":false}).exec(function (err, messages) {\n   //      if (err) {\n   //        return handleError(res, err);\n   //      }\n   //      if (!messages) {\n   //        return res.json(0);\n   //      }\n   //      res.json(messages);\n   //    });\n   //  }\n   // });\n}\n\n// Gets all Messages from the DB of a user and seller(for seller only)\nexport function sellerChat(req, res) {\n  let receiverId = req.user._id;\n  let senderId = req.params.id;\n  Message.find({\"sender\":senderId,\"receiver\":receiverId}).sort([['createdAt', 1]]).exec(function(err,msgs){\n    if(err){\n      return handleError(err,res);\n    }\n    else{\n      //res.json(msgs);\n      User.findById(senderId,'name email imageUrl').exec(function(err,sender){\n        if(err){\n          return handleError(err,res);\n        }\n        else{\n          User.findById(receiverId,'name email imageUrl').exec(function(err,receiver){\n            if(err){\n              return handleError(err,res);\n            }\n            else{\n            let resData={\n              sender:sender,\n              receiver:receiver,\n              messages:msgs\n            }\n            res.json(resData);\n            }\n          })\n        }\n      })\n    }\n  });\n}\n\n// //GET NUMBER OF UNREAD MESSAGES BY SELLER AND USER ID\n// export function count(req, res) {\n//   var count = 0;\n//   var Id = req.user._id;\n//   var flag = req.params.flag;\n//   //to get seller unread\n//   if(flag == 1) \n//   { \n//     Message.find({\"receiver\":Id}).exec(function (err, messages){\n//       for (var i = 0; i < messages.length; i++) {\n//         if(messages[i].receiverRead === false)\n//         {\n//           count++;\n//         }\n//       }\n//       res.json(count);\n//     });\n//   }\n//   //to get user unread\n//   if(flag == 0)\n//   {\n     \n//     Message.find({\"sender\":Id}).exec(function (err, messages){\n//       for (var i = 0; i < messages.length; i++) {\n//         if(messages[i].senderRead == false)\n//         {\n//           count++;\n//         }\n//       }\n//       res.json(count);\n//     });\n//   }\n// }\n//GET NUMBER OF UNREAD MESSAGES BY SELLER AND USER ID\nexport function count(req, res) {\n  var count = 0;\n  var Id = req.user._id;\n  var flagval = req.params.flag;\n  //to get seller unread\n  if(flagval == 1) \n  { \n    var result = [];\n    var flag = 0;\n    var setValue=1;\n    var slot;\n    var receiverId = req.user._id;\n    var newObj = {};\n    var newArray = [];\n    Message.find({'receiver':receiverId}).distinct('sender').exec(function (err, messages){\n      if(err)\n      {\n        return res.status(400).send({\n          message: 'Something went Wrong.'\n        });\n      }\n      if(messages.length == 0){\n        return res.send({\n          message: 'You do not have any user who contacted you atleast once.'\n        });\n      }\n      else\n      {\n        for(let i = 0;i<messages.length;i++)\n        {\n          User.findById(messages[i],{name:1,email:1}).exec(function(err,users){\n            if(err)\n            {\n              return res.status(400).send({\n                message: 'Something Wrong'\n              });\n            }\n            else{\n              result.push(users);\n              if(result.length === messages.length)\n              {\n                for(let j=0;j<messages.length;j++)\n                {\n                  Message.count({'receiver':receiverId,'sender':messages[j],\"receiverRead\":false}).exec(function (err, count){\n                    if(err)\n                    {\n                      return res.status(400).send({\n                        message: 'Something Wrong'\n                      });\n                    }\n                    else{\n                      Message.find({'receiver':receiverId,'sender':messages[j]}).exec(function(err,lastMsg){                                                                                                                                                                                                                               \n                        if(err){\n                          res.send({\n                            message:'Error occured.'\n                          })\n                        }\n                        else{\n                          let lastUserMsgIndex = lastMsg.length-1;\n                          let lastMsgData = lastMsg[lastUserMsgIndex].message;\n                          let lastmsgTime = lastMsg[lastUserMsgIndex].createdAt;\n                          for(let k=0;k<messages.length;k++)\n\n                          {\n                            console.log(JSON.stringify(result[k])+\"result\")\n                            if(result[k]!= null){\n                            var x = result[k]._id.toString();\n                            var y = messages[j].toString();\n                          }\n                            if(x === y)\n                            {\n                              flag++;\n                              if(result[k]!= null){\n                              newObj = {\n                                lastMessage:lastMsgData,\n                                _id: result[k]._id,\n                                name: result[k].name,\n                                email: result[k].email,\n                                count: count,\n                                lastmsgTime:lastmsgTime\n                              }\n                            }\n                            if(newObj.count>0){\n                              newArray.push(newObj);\n                            }\n                          }\n                            if(flag === messages.length && setValue === 1)\n                            {\n                              newArray.sort(function (a, b) {\n                                return b.lastmsgTime - a.lastmsgTime;\n                              });\n                              res.json(newArray);\n                              setValue = 0;\n                             }\n                            \n                          }\n                        }\n                      })\n                    }\n                  })\n                }\n              }\n            }\n          })\n        }\n      }\n    })\n  }\n  //to get user unread\n  if(flagval == 0)\n  {\n     \n    Message.find({\"sender\":Id}).exec(function (err, messages){\n      for (var i = 0; i < messages.length; i++) {\n        if(messages[i].senderRead == false)\n        {\n          count++;\n        }\n      }\n      res.json(count);\n    });\n  }\n}\n// Creates a new Message in the DB\nexport function create(req, res) {\n  console.log(\"req.body--------\" + JSON.stringify(req.body))\n  var senderId   = req.body.sender;\n  var receiverId = req.body.receiver;\n  var message    = new Message();\n  message.timestamp = Date.parse(new Date());\n  message.sender   = senderId;\n  message.receiver = receiverId;\n  if(req.body.sentBy == 'sender')\n  {\n    message.receiverRead = false;\n  }\n  if(req.body.sentBy == 'receiver')\n  {\n    message.senderRead = false;\n  }\n  if(req.body.fileUrl != undefined){\n    message.fileUrl = req.body.fileUrl;\n    message.fileType = req.body.fileType;\n    message.fileName = req.body.fileName;\n  }\n // message.sendTo = req.body.sendTo;\n  message.message = req.body.message;\n  message.sentBy = req.body.sentBy;\n  // Save Message \n  message.save(function (err) {\n    if (err) {\n      return res.status(400).send({\n        message: 'Something Wrong'\n      });\n    } else {\n      res.json(message);\n    }\n  });\n}\n\n//Mark all as read(only for seller)\nexport function markRead(req, res) {\n  var receiverId = req.user._id;\n  Message.update({\"receiver\":receiverId,'receiverRead':false},{$set:{'receiverRead':true}},{'multi':true}).exec(function (err, message) {\n    if (err) {\n      return handleError(res, err);\n    }\n    if (!message) {\n      return res.status(404).send('Not Found');\n    }\n    Message.count({\"receiver\":receiverId,\"receiverRead\":false}).exec(function (err, messages) {\n      if (err) {\n        return handleError(res, err);\n      }\n      res.json(messages);\n    });\n  });\n}\n\n"]}