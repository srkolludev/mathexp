{"version":3,"sources":["api/message/message.socket.js"],"names":["demo","register","createNotifyListener","createListener","events","save","notify","data","receiverSocketIds","receiverSocketId","socket","event","listener","notifyListner","on","removeListener","doc","SocketId","count","console","log","emit","receiver","sentBy","sender"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;QAWgBA,I,GAAAA,I;QAKAC,Q,GAAAA,Q;QASAC,oB,GAAAA,oB;QAWAC,c,GAAAA,c;;AAnChB;;;;;;AAGA;AACA,IAAIC,SAAS;AACXC,QAAM;AADK,CAAb;AAGA,IAAIC,MAAJ;AACA,IAAIC,OAAO,EAAX;AACA,IAAIC,oBAAkB,EAAtB;AACO,SAASR,IAAT,CAAcS,gBAAd,EAAgC;AACrC;AACD;AACA;AACA;AACM,SAASR,QAAT,CAAkBS,MAAlB,EAA0B;AAC/B,MAAIC,QAAQP,OAAOC,IAAnB;AACE,MAAIO,WAAWT,eAAeO,MAAf,CAAf;AACA,MAAIG,gBAAgBX,qBAAqBQ,MAArB,CAApB;AACA,oBAAcI,EAAd,CAAiBH,KAAjB,EAAuBC,QAAvB;AACA,oBAAcE,EAAd,CAAiBH,KAAjB,EAAuBE,aAAvB;AACAH,SAAOI,EAAP,CAAU,YAAV,EAAwBC,eAAeL,MAAf,EAAwBC,KAAxB,EAA+BC,QAA/B,CAAxB;AACH;;AAEM,SAASV,oBAAT,CAA8BQ,MAA9B,EAAsC;AAC3C,SAAO,UAASM,GAAT,EAAc;AACnBN,WAAOO,QAAP,GAAkBT,iBAAlB;AACA,QAAGQ,IAAIE,KAAJ,GAAY,CAAf,EAAiB;AACfC,cAAQC,GAAR,CAAY,WAAS,yBAAeJ,GAAf,CAArB;AACAN,aAAOW,IAAP,CAAY,WAASL,IAAIM,QAAzB,EAAmCN,GAAnC;AACD;AAEF,GAPD;AAQD;;AAEM,SAASb,cAAT,CAAwBO,MAAxB,EAAgC;AACrC,SAAO,UAASM,GAAT,EAAc;AACnBN,WAAOO,QAAP,GAAkBT,iBAAlB;AACA,QAAGQ,IAAIO,MAAJ,IAAc,QAAjB,EACA;AACEJ,cAAQC,GAAR,CAAY,QAAM,yBAAeJ,GAAf,CAAlB;AACAN,aAAOW,IAAP,CAAY,YAAUL,IAAIM,QAA1B,EAAoCN,GAApC;AACD,KAJD,MAMA;AACEG,cAAQC,GAAR,CAAY,WAAS,yBAAeJ,GAAf,CAArB;AACAN,aAAOW,IAAP,CAAY,YAAUL,IAAIQ,MAA1B,EAAkCR,GAAlC;AACD;AACF,GAZD;AAaD;;AAED,SAASD,cAAT,CAAwBL,MAAxB,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiD;AAC/C,SAAO,YAAW;AAChBF,WAAOK,cAAP,CAAsBJ,KAAtB,EAA6BC,QAA7B;AACD,GAFD;AAGD","file":"message.socket.js","sourcesContent":["// /**\n//  * Broadcast updates to client when the model changes\n//  */\n\n// 'use strict';\n\n// import MessageEvents from './message.events';\n\n// // Model events to emit\n// var events = ['save', 'remove'];\n\n// export function register(socket) {\n//   // Bind model events to socket events\n//   for(var i = 0, eventsLength = events.length; i < eventsLength; i++) {\n//     var event = events[i];\n//     var listener = createListener(`message:${event}`, socket);\n\n//     MessageEvents.on(event, listener);\n//     socket.on('disconnect', removeListener(event, listener));\n//   }\n// }\n\n\n// function createListener(event, socket) {\n//   return function(doc) {\n//     socket.emit(event, doc);\n//   };\n// }\n\n// function removeListener(event, listener) {\n//   return function() {\n//     MessageEvents.removeListener(event, listener);\n//   };\n// }\n'use strict';\n//var count =1;\n//\n//var dateAndTime = 0;\nimport MessageEvents from './message.events';\nimport userEvents from './message.events';\n \n// Model events to emit\nvar events = {\n  save: 'save' \n};\nvar notify;\nvar data = [];\nvar receiverSocketIds='';\nexport function demo(receiverSocketId) {\n  // Bind model events to socket events\n // receiverSocketIds = receiverSocketId;\n // console.log('Conected array222:' + JSON.stringify(receiverSocketId));\n} \nexport function register(socket) {\n  var event = events.save;\n    var listener = createListener(socket);\n    var notifyListner = createNotifyListener(socket);\n    MessageEvents.on(event,listener);\n    MessageEvents.on(event,notifyListner);\n    socket.on('disconnect', removeListener(socket , event, listener));\n}\n\nexport function createNotifyListener(socket) {\n  return function(doc) {\n    socket.SocketId = receiverSocketIds;\n    if(doc.count > 0){\n      console.log('notify'+JSON.stringify(doc));\n      socket.emit('notify'+doc.receiver, doc);\n    }\n         \n  };\n}\n\nexport function createListener(socket) {\n  return function(doc) {\n    socket.SocketId = receiverSocketIds;\n    if(doc.sentBy == 'sender')\n    {\n      console.log('doc'+JSON.stringify(doc))\n      socket.emit('message'+doc.receiver, doc);\n    }\n    else\n    {\n      console.log('doc...'+JSON.stringify(doc))\n      socket.emit('message'+doc.sender, doc);\n    }\n  };\n}\n\nfunction removeListener(socket ,event, listener) {\n  return function() {\n    socket.removeListener(event, listener);\n  };\n}\n"]}