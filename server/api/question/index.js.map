{"version":3,"sources":["api/question/index.js"],"names":["controller","auth","router","get","hasRole","getQnsByUserId","getEndUserQnsByQnId","getQnByQnId","post","setQnHistory","getQns","put","upsert","create","delete","deleteQn","getEndUserQnsBySctId","getQnsBySearchParams","getQnsBySchemeParams","module","exports"],"mappings":"AAAA;;AACA;;AACA;;IAAYA,U;;AAEZ;;IAAYC,I;;AAEZ;;;;;;;;AAEA,IAAIC,SAAS,qBAAb;AACA;AACAA,OAAOC,GAAP,CAAW,OAAX,EAAoBF,KAAKG,OAAL,CAAa,CAAC,QAAD,EAAU,OAAV,CAAb,CAApB,EAAsDJ,WAAWK,cAAjE;;AAEA;AACAH,OAAOC,GAAP,CAAW,OAAX,EAAoBH,WAAWM,mBAA/B;;AAEAJ,OAAOC,GAAP,CAAW,gBAAX,EAA6BF,KAAKG,OAAL,CAAa,CAAC,QAAD,CAAb,CAA7B,EAAuDJ,WAAWO,WAAlE;;AAEA;AACA;;AAEA;AACA;AACAL,OAAOM,IAAP,CAAY,OAAZ,EAAsBP,KAAKG,OAAL,CAAa,CAAC,QAAD,CAAb,CAAtB,EAAgDJ,WAAWS,YAA3D;;AAEA;AACAP,OAAOC,GAAP,CAAW,GAAX,EAAiBF,KAAKG,OAAL,CAAa,CAAC,QAAD,EAAU,OAAV,CAAb,CAAjB,EAAmDJ,WAAWU,MAA9D;;AAEAR,OAAOS,GAAP,CAAW,GAAX,EAAiBV,KAAKG,OAAL,CAAa,CAAC,QAAD,EAAU,OAAV,CAAb,CAAjB,EAAmDJ,WAAWY,MAA9D;;AAEAV,OAAOM,IAAP,CAAY,GAAZ,EAAkBP,KAAKG,OAAL,CAAa,CAAC,QAAD,EAAU,OAAV,CAAb,CAAlB,EAAoDJ,WAAWa,MAA/D;;AAEAX,OAAOY,MAAP,CAAc,GAAd,EAAoBb,KAAKG,OAAL,CAAa,CAAC,QAAD,EAAU,OAAV,CAAb,CAApB,EAAsDJ,WAAWe,QAAjE;;AAEA;AACAb,OAAOC,GAAP,CAAW,UAAX,EAAuBH,WAAWgB,oBAAlC;;AAEA;AACAd,OAAOM,IAAP,CAAY,SAAZ,EAAsBP,KAAKG,OAAL,CAAa,CAAC,QAAD,CAAb,CAAtB,EAAgDJ,WAAWiB,oBAA3D;;AAEAf,OAAOM,IAAP,CAAY,SAAZ,EAAuBR,WAAWkB,oBAAlC;;AAEA;;AAEA;;AAEAC,OAAOC,OAAP,GAAiBlB,MAAjB","file":"index.js","sourcesContent":["'use strict';\nimport {Router} from 'express';\nimport * as controller from './question.controller';\n\nimport * as auth from '../../auth/auth.service';\n\nimport session from 'express-session';\n\nvar router = new Router();\n//run the authentication and based on the role return the questions\nrouter.get('/user', auth.hasRole(['master',\"admin\"]), controller.getQnsByUserId);\n\n//run the authentication and based on the role return the question\nrouter.get('/test', controller.getEndUserQnsByQnId);\n\nrouter.get('/opts/:id/:opt', auth.hasRole(['editor']), controller.getQnByQnId);\n\n//run the authentication and based on the role return the question\n//router.get('/hist/:id', auth.hasRole('editor'), controller.getQnHistByQnId);\n\n//generate and return, generate and save history return\n//router.post('/hist', auth.hasAnyRole(['editor',\"super\",\"admin\",\"super\"]), controller.setQnHistory);\nrouter.post('/hist',  auth.hasRole(['editor']), controller.setQnHistory);\n\n//test\nrouter.get('/',  auth.hasRole(['master',\"admin\"]), controller.getQns);\n\nrouter.put('/',  auth.hasRole(['master',\"admin\"]), controller.upsert);\n\nrouter.post('/',  auth.hasRole(['master',\"admin\"]), controller.create);\n\nrouter.delete('/',  auth.hasRole(['master',\"admin\"]), controller.deleteQn);\n\n//all\nrouter.get('/sct/:id', controller.getEndUserQnsBySctId);\n\n//get questions by search type and id, grade, sct, \nrouter.post('/search',auth.hasRole(['master']), controller.getQnsBySearchParams);\n\nrouter.post('/scheme', controller.getQnsBySchemeParams);\n\n//router.delete('/:id', controller.destroyQn);\n\n//router.put('/:id', controller.upsertQn);\n\nmodule.exports = router;\n"]}