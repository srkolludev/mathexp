{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","UserSchema","name","type","String","email","lowercase","required","indexOf","provider","imageUrl","publicId","role","default","password","street","loyaltyPoints","Array","totalLoyaltyPoints","Number","city","ZIP","country","phone","forgetPasswordNo","ConfirmEmailToken","resetPasswordToken","resetPasswordExpires","salt","facebook","twitter","google","github","virtual","get","_id","image","createdAt","path","validate","length","validatePresenceOf","value","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","err","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nimport {Schema} from 'mongoose';\nmongoose.Promise = require('bluebird');\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar UserSchema = new Schema({\n name: {\n  type:String\n },\nemail: {\n    type: String,\n    lowercase: true,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n},\nimageUrl:{\n  type:String\n},\n publicId:{\n  type:String\n },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  street:{\n    type:String\n  },\n  loyaltyPoints:{\n    type:Array\n  },\n  //current loyalty point\n  totalLoyaltyPoints:{\n    type:Number\n  },\n  city: {\n    type: String\n  },\n  ZIP: {\n    type: Number\n  },\n  country: {\n    type: String\n  },\n  phone: {\n    type:Number\n  },\n  forgetPasswordNo:{\n    type:String\n  },\n  ConfirmEmailToken:{\n    type:String\n  },\n  resetPasswordToken:{\n    type:String\n  },\n  resetPasswordExpires:{\n    type:Number\n  },\n  provider: String,\n  salt: String,\n  facebook: {},\n  twitter: {},\n  google: {},\n  github: {}\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      _id: this._id,\n      name: this.name,\n      role: this.role,\n      email:this.email,\n      street:this.street,\n      city:this.city,\n      image:this.image,\n      ZIP:this.ZIP,\n      country:this.country,\n      phone:this.phone,\n      createdAt:this.createdAt,\n      provider:this.provider\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      _id: this._id,\n      role: this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// // Validate empty email\n// UserSchema\n//   .path('email')\n//   .validate(function(email) {\n//     if(authTypes.indexOf(this.provider) !== -1) {\n//       return true;\n//     }\n//     return email.length;\n//   }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return password.length;\n  }, 'Password cannot be blank');\n\n// // Validate email is not taken\n// UserSchema\n//   .path('email')\n//   .validate(function(value, respond) {\n//     if(authTypes.indexOf(this.provider) !== -1) {\n//       return respond(true);\n//     }\n\n//     return this.constructor.findOne({ email: value }).exec()\n//       .then(user => {\n//         if(user) {\n//           if(this.id === user.id) {\n//             return respond(true);\n//           }\n//           return respond(false);\n//         }\n//         return respond(true);\n//       })\n//       .catch(function(err) {\n//         throw err;\n//       });\n//   }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if(!this.isModified('password')) {\n      return next();\n    }\n\n    if(!validatePresenceOf(this.password)) {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return next(new Error('Invalid password'));\n      } else {\n        return next();\n      }\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if(saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if(encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        return next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if(!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if(err) {\n        return callback(err);\n      }\n\n      if(this.password === pwdGen) {\n        return callback(null, true);\n      } else {\n        return callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if(typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if(typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    } else {\n      throw new Error('Missing Callback');\n    }\n\n    if(!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n  * Encrypt password\n  *\n  * @param {String} password\n  * @param {Function} callback\n  * @return {String}\n  * @api public\n  */\n encryptPassword(password, callback) {\n   if(!password || !this.salt) {\n     if(!callback) {\n       return null;\n     } else {\n       return callback('Missing password or salt');\n     }\n   }\n\n   var defaultIterations = 10000;\n   var defaultKeyLength = 64;\n   var salt = new Buffer(this.salt, 'base64');\n\n    if(!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength ,'sha1')\n        .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, 'sha1', (err, key) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, key.toString('base64'));\n      }\n    });\n  }\n\n};\nexport default mongoose.model('User', UserSchema);\n"]}