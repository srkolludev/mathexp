{"version":3,"sources":["api/rating/rating.controller.js"],"names":["index","show","create","upsert","patch","destroy","menuitemRating","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","resdata","length","message","$and","user","_id","order","params","orderId","catch","console","log","userID","rating","body","findById","menuItem","totalRating","undefined","noOfRating","toFixed","menuItems","update","afterUpdate","data","findOneAndUpdate","id","new","setDefaultsOnInsert","runValidators","menuitem","populate"],"mappings":"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","file":"rating.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/ratings              ->  index\n * POST    /api/ratings              ->  create\n * GET     /api/ratings/:id          ->  show\n * PUT     /api/ratings/:id          ->  upsert\n * PATCH   /api/ratings/:id          ->  patch\n * DELETE  /api/ratings/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Rating from './rating.model';\nimport MenuItem from '../menuItem/menuItem.model';\nimport Order from '../order/order.model';\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      // eslint-disable-next-line prefer-reflect\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n\n\n// Gets a list of Ratings\nexport function index(req, res) {\n  Rating.find().exec(function(err,resdata){\n    if(err){\n      return handleError(err,res);\n    }\n    if(resdata.length == 0){\n      res.status(200).send({\n        message:'No data found.'\n      })\n    }\n    else{\n      res.json(resdata);\n    }\n  })\n}\n\n// Gets a single Rating from the DB\nexport function show(req, res) {\n  return Rating.find( { $and: [ { user:  req.user._id }, { order: req.params.orderId } ] }).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// //create rating\n// export function create(req, res) {\n//   var userID                = req.user._id;\n//   var rating         = new Rating(req.body);\n//   rating.user        = userID;\n//   rating.save(function (err) {\n//     if (err) {\n//       console.log(err)\n//       return res.status(400).send({\n//         message: 'Something Wrong'\n//       });\n//     } else {\n//          // res.json({message:\"done\"}); \n//          MenuItem.findById(req.body.menuItem).exec(function (err, menuItem) {\n//               if (err) {\n//                 return handleError(res, err);\n//               }\n//               if (!menuItem) {\n//                 return res.status(404).send('Not Found');\n//               }\n//               if(menuItem.totalRating == undefined){\n//                 var totalRating= req.body.rating;\n//                var noOfRating=1;\n//                var rating=(totalRating/noOfRating);\n//               }else{\n//                 var totalRating= menuItem.totalRating + req.body.rating;\n//                var noOfRating=menuItem.noOfRating + 1;\n//                var rating= (totalRating/noOfRating).toFixed(1);\n//               }\n//                var menuItems        = new MenuItem(menuItem);\n//                menuItems.totalRating = totalRating;\n//                menuItems.noOfRating = noOfRating;\n//                menuItems.rating = rating;\n//                menuItems.update(\n//                 { \"_id\" : req.body.menuItem,\n//                  \"totalRating\":totalRating,\n//                  \"noOfRating\":noOfRating,\n//                  \"rating\":rating,\n//                 }).exec(function (err, afterUpdate) {\n//                                if (err) {\n//                                 return handleError(res, err);\n//                                 }\n//                                 if (!menuItem) {\n//                                   return res.status(404).send('Not Found');\n//                                 }\n//                                 res.json({message:\"Successfully Rated\"})\n//                           })\n//         });\n//     }\n//   });\n// }\n\n\nexport function create(req, res) {\n  console.log('11111111111111')\n  var userID                = req.user._id;\n  var rating         = new Rating(req.body);\n  rating.user        = userID;\n  rating.save(function (err) {\n    if (err) {\n      console.log(err)\n      return handleError(err,res);\n    }\n    else {\n      // res.json({message:\"done\"}); \n      MenuItem.findById(req.body.menuItem).exec(function (err, menuItem) {\n        if (err) {\n        return handleError(res, err);\n        }\n        if (!menuItem) {\n        return res.status(404).send('Not Found');\n        }\n        if(menuItem.totalRating == undefined){\n        var totalRating= req.body.rating;\n        var noOfRating=1;\n        var rating=(totalRating/noOfRating);\n        }\n        else{\n        var totalRating= menuItem.totalRating + req.body.rating;\n        var noOfRating=menuItem.noOfRating + 1;\n        var rating= (totalRating/noOfRating).toFixed(1);\n        }\n        var menuItems         = new MenuItem(menuItem);\n        menuItems.totalRating = totalRating;\n        menuItems.noOfRating  = noOfRating;\n        menuItems.rating      = rating;\n        menuItems.update(\n          { \"_id\" : req.body.menuItem,\n          \"totalRating\":totalRating,\n          \"noOfRating\":noOfRating,\n          \"rating\":rating,\n        }).exec(function (err, afterUpdate) {\n          if (err) {\n            return handleError(res, err);\n          }\n          if (!menuItem) {\n            return res.status(404).send('Not Found');\n          }\n          //res.json({message:\"Successfully Rated\"})\n          Order.findById(req.body.order).exec(function(err,data){\n            if(err){\n              return handleError(res, err);\n            }\n            else{\n              Order.update({'_id':req.body.order,'cart.productId': req.body.menuItem}, {'$set': {\n                'cart.$.ratingFlag': 1,\n                'cart.$.rating':  req.body.rating,\n                }}, function(err) { \n                  if(err){\n                    return handleError(err,res);\n                  }\n                  else{\n                    res.json({message:\"Successfully Rated\"})\n                  }\n              });\n            }\n          })\n        })\n      })\n    }\n  })\n}\n\n// Upserts the given Rating in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  return Rating.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Rating in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  return Rating.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Rating from the DB\nexport function destroy(req, res) {\n  return Rating.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\n// Gets a list of Ratings of a menuitem\nexport function menuitemRating(req, res) {\n  return Rating.find({'menuItem':req.params.menuitem},{}).populate('user','name imageUrl').exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n"]}