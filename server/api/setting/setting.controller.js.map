{"version":3,"sources":["api/setting/setting.controller.js"],"names":["index","show","create","upsert","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","errMessage","errName","errors","type","console","log","send","req","findOne","exec","catch","findById","params","id","body","_id","findOneAndUpdate","new","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"setting.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/settings              ->  index\n * POST    /api/settings              ->  create\n * GET     /api/settings/:id          ->  show\n * PUT     /api/settings/:id          ->  upsert\n * PATCH   /api/settings/:id          ->  patch\n * DELETE  /api/settings/:id          ->  destroy \n */\n\n'use strict';\nimport jsonpatch from 'fast-json-patch';\nimport Setting from './setting.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n     if (err) {\n      var errMessage = '';\n\n      // go through all the errors...\n      for (var errName in err.errors) {\n        switch(err.errors[errName].type) {\n          case 'required':\n            errMessage = 'Field is required';\n            break;\n          case 'notvalid':\n            errMessage = 'Field is not valid';\n            break;\n          default:\n            console.log(err.errors[errName].type);\n            errMessage = 'Other field error';\n            break;\n        }\n      }\n    res.status(statusCode).send(errMessage);\n  }\n  }\n}\n\n// Gets a list of Settings\nexport function index(req, res) {\n  return Setting.findOne().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Setting from the DB\nexport function show(req, res) {\n  return Setting.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Setting in the DB\nexport function create(req, res) {\n  return Setting.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n\n\n// Upserts the given Setting in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Setting.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n\n\n// Deletes a Setting from the DB\nexport function destroy(req, res) {\n  return Setting.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}