{"version":3,"sources":["config/socketio.js"],"names":["socketio","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","data","nsp","name","onDisconnect","onConnect","mongoose","require","clientInfoArray","receiverSocketId","sockets","people","userIds","id","console","splice","indexOf","push","userId","user_id","findUserByName","i","receiverId","Types","ObjectId","receiver_id","senderId","sender_id","update","$set","exec","err","message","handleError","res","status","send","count","messages","emit","socketID","test","register"],"mappings":"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","file":"socketio.js","sourcesContent":["\n\n/**\n * Socket.io configuration\n */\n'use strict'; \nimport config from './environment';\nimport Message from '../api/message/message.model';  \nvar mongoose = require('mongoose');\nvar clientInfoArray = [];\nvar receiverSocketId = '';\nvar sockets = [];\nvar people = {};\nvar userIds = [];\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {\n   delete people[socket.id];\n  // socket.removeAllListeners();\n  console.log('spliced');\n  sockets.splice(sockets.indexOf(socket), 1);\n  \n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  // socket.on('info', data => {\n  //   socket.log(JSON.stringify(data, null, 2));\n  // });\n      socket.on('restaurantInfo', function (data) {\n        console.log('HELLO.....Here.......')\n               console.log(\"vconnect\" + JSON.stringify(data));\n                sockets.push(socket);\n                userIds.push(data.userId);\n                people[socket.id] = data.userId;\n            });\n\n      socket.on('message',function(data) {\n           console.log('user_order$$$$$$$$$$$$$'+ JSON.stringify(data));\n           var userId = data.user_id;\n           console.log('userId###########'+ userId);\n           receiverSocketId = findUserByName(userId);\n           console.log('receiverSocketId:::' + receiverSocketId);\n      });\n\n\n//for receiver \nsocket.on('updateSeller',function(data){\n  let i = 0;\n  console.log('updateSeller called..................')\n  var receiverId =  mongoose.Types.ObjectId(data.receiver_id);\n  var senderId =  mongoose.Types.ObjectId(data.sender_id);\n  console.log('receiverId.....' +receiverId );\n  console.log('senderId....' +senderId );\n  Message.update({\"receiver\":receiverId,\"sender\":senderId,'receiverRead':false},{$set:{'receiverRead':true}},{'multi':true}).exec(function (err, message) {\n    if (err) {\n      return handleError(res, err);\n    }\n    if (!message) {\n      return res.status(404).send('Not Found');\n    }\n  \n     Message.count({\"receiver\":receiverId,\"receiverRead\":false}).exec(function (err, messages) {\n        if (err) {\n          return handleError(res, err);\n        }\n        console.log('messages'+messages);\n        socket.emit('updatedCount'+receiverId,messages);\n      });\n  });\n \n});\n\n\n//for user \nsocket.on('updateUser',function(data){\n  let i = 0;\n  var receiverId = data.receiver_id;\n  var senderId = data.sender_id;\n  Message.update({\"receiver\":receiverId,\"sender\":senderId,'senderRead':false},{$set:{'userRead':true}},{'multi':true}).exec(function (err, message) {\n    if (err) {\n      return handleError(res, err);\n    }\n    if (!message) {\n      return res.status(404).send('Not Found');\n    }\n    console.log('message***' + JSON.stringify(message));\n     Message.count({\"sender\":senderId,\"senderRead\":false}).exec(function (err, messages) {\n        if (err) {\n          return handleError(res, err);\n        }\n        console.log('CountUser====' + messages);\n        socket.emit('updatedCount'+data.sender_id,messages);\n      });\n  });\n \n});\n\n\n          //find user by name (\nfunction findUserByName(userId) {\n  console.log('userId---------------' + userId)\n    for(var socketID in people) {\n      console.log('http'+ JSON.stringify(people[socketID]))\n        if(people[socketID] === userId) {\n          console.log('socketId-----------' + socketID )\n            return test = socketID;\n        }\n    }\n    // return false;\n    console.log('not there');\n}\n   //require('../api/order/order.socket').ajay('ajay'); \n  // Insert sockets below\n  require('../api/newsletter/newsletter.socket').register(socket);\n  require('../api/pincode/pincode.socket').register(socket);\n  require('../api/newscomment/newscomment.socket').register(socket);\n  require('../api/testimonial/testimonial.socket').register(socket);\n  require('../api/wishlist/wishlist.socket').register(socket);\n  require('../api/carddetail/carddetail.socket').register(socket);\n  require('../api/contact/contact.socket').register(socket);\n  require('../api/booktable/booktable.socket').register(socket);\n  require('../api/rating/rating.socket').register(socket);\n  require('../api/address/address.socket').register(socket);\n  //require('../api/order/Order.socket').register(socket);\n  require('../api/notification/notification.socket').register(socket);\n   require('../api/message/message.socket').register(socket);\n   require('../api/upcoming/upcoming.socket').register(socket);\n   require('../api/coupon/coupon.socket').register(socket);\n   require('../api/favourite/favourite.socket').register(socket);\n   require('../api/news/news.socket').register(socket);\n  require('../api/setting/setting.socket').register(socket);\n // require('../api/image/image.socket').register(socket);\n  require('../api/order/order.socket').register(socket);\n  require('../api/business/business.socket').register(socket);\n  require('../api/tag/tag.socket').register(socket);\n  require('../api/menuItem/menuItem.socket').register(socket);\n  require('../api/category/category.socket').register(socket);\n}\n\nexport default function(socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function(socket) {\n    socket.address = `${socket.request.connection.remoteAddress}:${socket.request.connection.remotePort}`;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function(...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n  });\n}\n"]}