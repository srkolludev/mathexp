{"version":3,"sources":["api/order/order.model.js"],"names":["mongoose","require","Schema","autoIncrement","initialize","connection","OrderSchema","user","type","ObjectId","ref","cardDetails","deliveryMethod","String","subTotal","Number","taxAmount","couponDiscountPercentage","loyalityUsed","deductedAmountByCoupon","payment","transactionId","paymentType","paymentStatus","Boolean","default","userNotification","loyaltyPoints","credit","points","orderId","dateAndTime","Date","now","paymentOption","billingAddress","shippingAddress","grandTotal","cart","Array","status","orderID","unique","createdAt","updatedAt","plugin","model","field","startAt","incrementBy"],"mappings":"AAAA;;;;;;AACA;;AACA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AAAA,IACAC,SAASF,SAASE,MADlB;AAAA,IAEAC,gBAAgBF,QAAQ,yBAAR,CAFhB;AAGAE,cAAcC,UAAd,CAAyBJ,SAASK,UAAlC;AACA,IAAIC,cAAc,IAAIN,SAASE,MAAb,CAAoB;;AAEtCK,QAAM;AACJC,UAAMN,OAAOO,QADT;AAEJC,SAAK;AAFD,GAFgC;;AAOtCC,eAAY,EAP0B;;AAStCC,kBAAgB;AACbJ,UAAKK;AADQ,GATsB;AAYtCC,YAAS;AACPN,UAAKO;AADE,GAZ6B;AAetCC,aAAU;AACRR,UAAKO;AADG,GAf4B;AAkBtCE,4BAAyB;AACvBT,UAAKO;AADkB,GAlBa;AAqBtCG,gBAAa;AACXV,UAAKK;AADM,GArByB;AAwBtCM,0BAAuB;AACrBX,UAAKO;AADgB,GAxBe;AA2BtCK,WAAQ;AACNC,mBAAc;AACZb,YAAKK;AADO,KADR;AAINS,iBAAY;AACVd,YAAKK;AADK,KAJN;AAONU,mBAAc;AACZf,YAAKgB,OADO;AAEZC,eAAQ;AAFI;AAPR,GA3B8B;;AAwCtC;AACA;AACAC,oBAAiB,CAAC,EAAD,CA1CqB;AA6CtC;AACAC,iBAAc,CAAC;AACbC,YAAO;AACLpB,YAAKgB;AADA,KADM;AAIbK,YAAO;AACLrB,YAAKO;AADA,KAJM;AAObe,aAAQ;AACNtB,YAAKK;AADC,KAPK;AAUbkB,iBAAY;AACVvB,YAAKwB,IADK;AAEVP,eAAQO,KAAKC;AAFH;AAVC,GAAD,CA9CwB;AA6DtCC,iBAAc;AACZ1B,UAAKK;AADO,GA7DwB;;AAiEtCsB,kBAAe,EAjEuB;;AAmEtCC,mBAAgB,EAnEsB;;AAqEtCC,cAAW;AACT7B,UAAKO;AADI,GArE2B;;AAyEtC;AACAuB,QAAM;AACJ9B,UAAM+B;AADF,GA1EgC;;AA8EtCC,UAAO;AACLhC,UAAKK,MADA;AAELY,aAAQ;AAFH,GA9E+B;;AAmFtCgB,WAAS;AACPjC,UAAMO,MADC;AAEPU,aAAS,IAFF;AAGPiB,YAAQ;AAHD,GAnF6B;;AAyFtCC,aAAW;AACTnC,UAAMwB,IADG;AAETP,aAASO,KAAKC;AAFL,GAzF2B;;AA8FtCW,aAAW;AACTpC,UAAMwB;AADG;;AA9F2B,CAApB,CAAlB;AAmGA1B,YAAYuC,MAAZ,CAAmB1C,cAAc0C,MAAjC,EAAyC;AACvCC,SAAO,OADgC;AAEvCC,SAAO,SAFgC;AAGvCC,WAAS,KAH8B;AAIvCC,eAAa;AAJ0B,CAAzC;AAMA,2BAAe3C,WAAf;kBACeN,SAAS8C,KAAT,CAAe,OAAf,EAAwBxC,WAAxB,C","file":"order.model.js","sourcesContent":["'use strict';\nimport {registerEvents} from './order.events';\nvar mongoose = require('mongoose'),\nSchema = mongoose.Schema,\nautoIncrement = require('mongoose-auto-increment');\nautoIncrement.initialize(mongoose.connection);\nvar OrderSchema = new mongoose.Schema({\n\nuser: {\n  type: Schema.ObjectId,\n  ref: 'User'\n},\n\ncardDetails:{},\n\ndeliveryMethod: {\n  \ttype:String\n},\nsubTotal:{\n  type:Number\n},\ntaxAmount:{\n  type:Number\n},\ncouponDiscountPercentage:{\n  type:Number\n},\nloyalityUsed:{\n  type:String\n},\ndeductedAmountByCoupon:{\n  type:Number\n},\npayment:{\n  transactionId:{\n    type:String\n  },\n  paymentType:{\n    type:String\n  },\n  paymentStatus:{\n    type:Boolean,\n    default:false\n  }\n},\n\n//user notification every time\n//when status changes\nuserNotification:[{\n\n}],\n//address: {},\nloyaltyPoints:[{\n  credit:{\n    type:Boolean\n  },\n  points:{\n    type:Number\n  },\n  orderId:{\n    type:String\n  },\n  dateAndTime:{\n    type:Date,\n    default:Date.now\n  }\n}],\npaymentOption:{\n  type:String\n},\n\nbillingAddress:{},\n\nshippingAddress:{},\n\ngrandTotal:{\n  type:Number\n},\n\n//it will hold all product info\ncart: {\n  type: Array\n},\n\nstatus:{\n  type:String,\n  default:'pending'\n},\n\norderID: {\n  type: Number,\n  default: 1000,\n  unique: true\n},\n\ncreatedAt: {\n  type: Date,\n  default: Date.now\n},\n\nupdatedAt: { \n  type: Date \n}\n\n});\nOrderSchema.plugin(autoIncrement.plugin, {\n  model: 'Order',\n  field: 'orderID',\n  startAt: 10000,\n  incrementBy: 1\n});\nregisterEvents(OrderSchema);\nexport default mongoose.model('Order', OrderSchema);\n"]}