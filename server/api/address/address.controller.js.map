{"version":3,"sources":["api/address/address.controller.js"],"names":["index","userAddress","show","create","upsert","destroy","cron","require","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","schedule","req","find","user","id","exec","catch","params","findById","address","body","_id","flag","findOneAndUpdate","new","setDefaultsOnInsert","runValidators","primaryAddress","length","abc"],"mappings":"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","file":"address.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/addresss              ->  index\n * POST    /api/addresss              ->  create\n * GET     /api/addresss/:id          ->  show\n * PUT     /api/addresss/:id          ->  upsert\n * PATCH   /api/addresss/:id          ->  patch\n * DELETE  /api/addresss/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Address from './address.model';\nimport seedDatabaseIfNeeded from '../../config/seed';\nvar cron = require('node-cron');\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n//REMOVE COMMENTS\n//cron job in every 30 minute\n//override database by seed db\ncron.schedule('*/30 * * * *', function(){\nseedDatabaseIfNeeded();\n});\n\n\n\n\n// Gets a list of Addresses\nexport function index(req, res) {\n  return Address.find({'user':req.user.id},{}).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n\n// Gets a list of Addresses for admin\nexport function userAddress(req, res) {\n  return Address.find({'user':req.params.id},{}).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n\n// Gets a single Address from the DB\nexport function show(req, res) {\n  return Address.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Address in the DB\nexport function create(req, res) {\n  let address = new Address(req.body);\n  address.user = req.user.id;\n  address.save(function(err){\n    if(err){\n      return handleError(err,res);\n    }\n    res.json(address);\n  })\n}\n\n// Upserts the given Address in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  //when not updating primaryAddress\n  if(req.body.flag == 0){\n    return Address.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n      .then(respondWithResult(res))\n      .catch(handleError(res));\n  }                                                              \n  if(req.body.flag == 1){\n    Address.find({'user':req.user._id,primaryAddress:1},{}).exec(function(err,address){\n      if(address.length == 0){\n        return Address.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n      }\n      else{\n        address[0].primaryAddress = 0;\n      }\n      address[0].save(function(err){\n        if(err){\n          return handleError(res)\n        }\n        else{\n          abc();\n        }\n      })\n      function abc(){\n        return Address.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n      }\n    })\n  }\n}\n\n\n// Deletes a Address from the DB\nexport function destroy(req, res) {\n  return Address.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}