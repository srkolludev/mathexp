{"version":3,"sources":["core/evaluate.js"],"names":["TapDigit","Token","Operator","Identifier","Number","TapUtil","util","exports","module","parseEquation","equation","datarules","usecase","Util","evObj","Evaluator","evaluate","ctxData","data","results","console","log","evda","ans","main","Result","e","toString","getChoices","mtch","getRandomChoices","ctx","parser","Parser","context","arguments","length","Context","fracobj","Fractions","condexps","resultobj","tokenobj","Variables","VarDiv","VarSub","ctxVarsCur","ctxRunCond","execVars","node","left","right","expr","args","hasOwnProperty","Expression","indexOf","parseFloat","Binary","operator","SyntaxError","Unary","expression","Constants","push","getRandomByRules","Assignment","value","name","FunctionCall","Functions","i","exec","apply","ctxVarsCurLeft","JSON","parse","ctxVarsCurRight","swap","isNaN","performFracOp","dcntleft","countDecimals","dcntright","rslt","String","split","dcnt","Math","round","toFixed","StepExpressions","val","dmfactor","pow","performDivison","currentContext","currentDatarules","isDivisable","getDivisable","Error","slice","ciden","valm1","valf2","mfres","fres","process_f","getContextVars","changeDatarules","rng","dcntmin","dcntmax","dmfactmm","ctxVarsCommon","ctxVarsCommonEqn","j","ctxVarsCurLeftOnly","ctxVarsCurRightOnly","isExists","k","process_variable","process_variables","getNext","curNum","minNum","maxNum","getNextValue","newdivchkeqn","neweqn","eqn","replace","replacer","match","$1","eval","min","max","startNum","commonNum","commonVal","getRandom","ctxVarsleft","ctxVarsright","minl","maxl","minr","maxr","leftNum","rightNum","leftVal","rightVal","startNuml","startNumr","fracidentifier","val1","val2","dr","uc","setDataRules","setUseCase","parseStep","result","reRun","message","stepidx","resultArr","tree","Array","robj","tObj","StepTokens","tokens","getTokens","resTokenObj","resultMain","cnt","Object","prototype","call","map","a","trm","lexer","Lexer","T","lexerstep","matchOp","token","op","type","parseArgumentList","parseExpression","peek","next","parseArgument","parseFunctionCall","arg","parsePrimary","parseAssignment","parseUnary","parseMultiplicative","parseRelation","parseAdditive","parseConcat","reset","getAllTokens","getStepTokens","stepname","bHitStep","steptokens","tokensObj","wrapResult","initFract","opd","oprdN","oprdD","getFrac","opdr","opdmixed","opdm","opdf","opdparts","simplifyFrac","isneg","gcd","simplifyFracParts","opt","opn","dmoptN","dmoptD","dmfactopt","dmopdN","dmopdD","dmfactopd","index","marker","peekNextChar","idx","charAt","getNextChar","ch","isWhiteSpace","isLetter","isDecimalDigit","isFractionDigit","createToken","start","end","skipSpaces","scanOperator","undefined","isIdentifierStart","isIdentifierPart","scanIdentifier","id","isStringStartOrEnd","isOperator","isStringPart","scanString","scanNumber","number","str","pi","phi","abs","acos","asin","atan","ceil","cos","exp","floor","random","sin","sqrt","tan","step1","step2","step3","step4","step5","step6","step7","step8","step9","step10","step11","step12","cond","shs1","shs","shs2","shs3","shs4","shs5","shs6","sortlh","sorthl","isprime","issorthl","issortlh","high","low","lcm","time12","whole","round10","floor10","ceil10","round100","seq","oper","ineq","nconv","neq","repeatvalnop","repeatvaln","n","trim","opts","num","ntyp","num2","rnum","lnum","rem","uconv","nums","iseq","cmpnum","getRandomOperator","getfnum","rmult","lmult","pos","pose","sep","step","evalnum","regStr","regExp","RegExp","whnum","decnum","roundlen","mul","decimalAdjust","NaN","h","m","hh","strap","toUpperCase","mh","mm","t","pad","width","z","sortlist","sort","comparehlany","comparelhany","f1","f2","p2","p1","gcdlist","b","numone","numtwo","multval","absval","myarg","range","primes","createRange","setPrimes","limit","rndvar","diff","rndval","zo","datarule","arrresult","sh","getShuffle","mys","n1","n2","nn1","nn2","result2","r1","r2","ampm","getRandomChoiceNumber","opr","charr","dcntresult","ch1","ch2","ch3","ch3res","dsize","d1","minN","ch2ran","ch2res","ch3ran","rnd","values","dcntrnd","rndNext","array","temp","shuffleArray"],"mappings":"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","file":"evaluate.js","sourcesContent":["var TapDigit;\r\nTapDigit = TapDigit || {};\r\nTapDigit.Token = {\r\n    Operator: 'Operator',\r\n    Identifier: 'Identifier',\r\n    Number: 'Number'\r\n};\r\nvar TapUtil;\r\nTapUtil = TapUtil || {};\r\n\r\n\r\n/*global TapDigit:true */\r\nvar util;\r\n\r\nvar exports = module.exports = {};\r\n\r\nexports.parseEquation = function (equation, datarules, usecase) {\r\n\r\n    try {\r\n        util = new TapUtil.Util();\r\n        //util.setPrimes();\r\n\r\n        let evObj = new TapDigit.Evaluator();\r\n        evObj.evaluate(equation, datarules, usecase);\r\n        let ctxData = evObj.data();\r\n        let results = evObj.results();\r\n        console.log('Result: ' + JSON.stringify(results));\r\n        console.log('ctxData: ' + JSON.stringify(ctxData));\r\n        this.evda = ctxData;\r\n        this.ans = results.main.Result;\r\n        // call if needed from the server.js\r\n        // this.mtch = util.getRandomChoices(this.ans,datarules);\r\n    } catch (e) {\r\n        console.log('Error: ' + e.toString());\r\n        throw e;\r\n    }\r\n\r\n};\r\n\r\nexports.getChoices = function (ans, datarules) {\r\n    try {\r\n        util = new TapUtil.Util();\r\n        this.mtch = util.getRandomChoices(ans, datarules);\r\n    } catch (e) {\r\n        console.log('Error: ' + e.toString());\r\n        throw e;\r\n    }\r\n};\r\n\r\n//module.exports = parseEquation;\r\n\r\n\r\n///////////////////////////ONLY COPT THIS BELOW ONE FOR CHANGES////////////////////////////\r\n///////////////////////////////////////////////////////\r\nTapDigit.Evaluator = function (ctx) {\r\n    let parser = new TapDigit.Parser(),\r\n        context = (arguments.length < 1) ? new TapDigit.Context() : ctx;\r\n    let fracobj = new TapDigit.Fractions(context);\r\n    //let stepResults = new Array();\r\n    //let stepTokens = new Array();\r\n    let datarules;\r\n    let usecase;\r\n    let condexps; //globalvariable\r\n    let resultobj = {};\r\n    let tokenobj = {};\r\n    context.Variables = {};\r\n\r\n    //used to determine which one tried and changed, so that they will not be tried again\r\n    //variable divison and subtraction to control the result type of the data such as proper numbers and positive/negative\r\n    context.VarDiv = {};\r\n    context.VarSub = {};\r\n\r\n    let ctxVarsCur = [];\r\n    let ctxRunCond = false;\r\n\r\n    //created to determine the context variables\r\n\r\n    function execVars(node) {\r\n        let left, right, expr, args;\r\n        if (node.hasOwnProperty('Expression')) {\r\n            return execVars(node.Expression);\r\n        }\r\n\r\n        if (node.hasOwnProperty('Number')) {\r\n            if (node.Number.indexOf(\"f\") >= 0) {\r\n                return node.Number;\r\n            }\r\n            return parseFloat(node.Number);\r\n            // return parseFloat(node.Number);\r\n        }\r\n\r\n        if (node.hasOwnProperty('Binary')) {\r\n            node = node.Binary;\r\n            left = execVars(node.left);\r\n            right = execVars(node.right);\r\n            switch (node.operator) {\r\n                case '>':\r\n                    return 1;\r\n                case '+':\r\n                    return left + right;\r\n                case '-':\r\n                    return left - right;\r\n                case '*':\r\n                    return left * right;\r\n                case '/':\r\n                    return left / right;\r\n                default:\r\n                    throw new SyntaxError('Unknown operator ' + node.operator);\r\n            }\r\n        }\r\n        if (node.hasOwnProperty('Unary')) {\r\n            node = node.Unary;\r\n            expr = execVars(node.expression);\r\n            switch (node.operator) {\r\n                case '+':\r\n                    return expr;\r\n                case '-':\r\n                    return -expr;\r\n                default:\r\n                    throw new SyntaxError('Unknown operator ' + node.operator);\r\n            }\r\n        }\r\n\r\n        if (node.hasOwnProperty('Identifier')) {\r\n            if (context.Constants.hasOwnProperty(node.Identifier)) {\r\n                return context.Constants[node.Identifier];\r\n            }\r\n            if (context.Variables.hasOwnProperty(node.Identifier)) {\r\n                ctxVarsCur.push(node.Identifier);\r\n                return context.Variables[node.Identifier];\r\n            }\r\n            else { //it never execute this\r\n                //console.log(\"context.datarules..\" + JSON.stringify(datarules[node.Identifier]));\r\n                context.Variables[node.Identifier] = util.getRandomByRules(datarules[node.Identifier])\r\n                // context.Variables[node.Identifier] = util.getFromShuffle(node.Identifier);\r\n                //console.log(\"context.Variables..\" + JSON.stringify(context.Variables));\r\n                return context.Variables[node.Identifier];\r\n\r\n            }\r\n            //throw new SyntaxError('Unknown identifier');\r\n        }\r\n        if (node.hasOwnProperty('Assignment')) {\r\n            right = execVars(node.Assignment.value);\r\n            context.Variables[node.Assignment.name.Identifier] = right;\r\n            return right;\r\n        }\r\n\r\n        if (node.hasOwnProperty('FunctionCall')) {\r\n            expr = node.FunctionCall;\r\n            if (context.Functions.hasOwnProperty(expr.name)) {\r\n                console.log('node FunctionCall:' + expr.name + \"args.length:\" + expr.args.length)\r\n                args = [];\r\n                for (let i = 0; i < expr.args.length; i += 1) {\r\n                    args.push(exec(expr.args[i]));\r\n                }\r\n                return context.Functions[expr.name].apply(null, args);\r\n            }\r\n            throw new SyntaxError('Unknown function ' + expr.name);\r\n        }\r\n        throw new SyntaxError('Unknown syntax node');\r\n    }\r\n\r\n    function exec(node) {\r\n        //console.log(\"executing.node..\" + JSON.stringify(node));\r\n        let left, right, expr, args;\r\n        if (node.hasOwnProperty('Expression')) {\r\n            return exec(node.Expression);\r\n        }\r\n\r\n        if (node.hasOwnProperty('Number')) {\r\n            //console.log(\"executing.node.Number.\" + JSON.stringify(`node));\r\n            if (node.Number.indexOf(\"f\") >= 0 || node.Number.indexOf(\"m\") >= 0) {\r\n                return node.Number;\r\n            }\r\n            return node.Number;\r\n        }\r\n\r\n        if (node.hasOwnProperty('Binary')) {\r\n            node = node.Binary;\r\n            // console.log(\"executing.node.left.\" + JSON.stringify(node));\r\n            left = exec(node.left);\r\n            // console.log(\"executing.node.right.\" + JSON.stringify(node));\r\n            right = exec(node.right);\r\n            switch (node.operator) {\r\n                case '>': {\r\n                    //if false change the context until the values are true;\r\n                    if (parseFloat(left) > parseFloat(right))\r\n                        return 1;\r\n                    else {\r\n                        if (ctxRunCond) {\r\n                            execVars(node.left);\r\n                            let ctxVarsCurLeft = JSON.parse(JSON.stringify(ctxVarsCur));\r\n                            ctxVarsCur = [];\r\n                            execVars(node.right);\r\n                            let ctxVarsCurRight = JSON.parse(JSON.stringify(ctxVarsCur));\r\n                            let swap;\r\n                            swap = context.Variables[ctxVarsCurLeft[0]];\r\n                            context.Variables[ctxVarsCurLeft[0]] = context.Variables[ctxVarsCurRight[0]];\r\n                            context.Variables[ctxVarsCurRight[0]] = swap;\r\n                            //change which are in left and right\r\n                            ctxRunCond = false;\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                case ':':\r\n                    //if (left.toString() == \"0\") {\r\n                    //   return right.toString();\r\n                    // }\r\n                    //else {\r\n                    //the first token  is a Number\r\n                    if (isNaN(right) && right == \"--\")    //seperator\r\n                        return \"\";\r\n                    else\r\n                        return left.toString() + \"__\" + right.toString();\r\n                // }\r\n\r\n                case '+':\r\n                    if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0 ||\r\n                        left.toString().indexOf(\"m\") >= 0 || right.toString().indexOf(\"m\") >= 0) {\r\n                        return fracobj.performFracOp(left.toString(), right.toString(), '+')\r\n                    }\r\n                    else {\r\n                        let dcntleft = util.countDecimals(left);\r\n                        let dcntright = util.countDecimals(right);\r\n                        //one of them are decimal\r\n                        if (dcntleft > 0 || dcntright > 0) {\r\n                            let rslt = Number(left) + Number(right);\r\n                            if (String(rslt).split(\".\").length > 1 && String(rslt).split(\".\")[1].length > 2) {\r\n                                let dcnt = String(rslt).split(\".\")[1].length;\r\n                                rslt = Number(Math.round(rslt + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n                            }\r\n                            else if (String(rslt).split(\".\").length < 2 || String(rslt).split(\".\")[1].length <= 2) {\r\n                                rslt = Number(rslt).toFixed(2)\r\n                            }\r\n                            return rslt;\r\n                        }\r\n                        else {\r\n                            return Number(left) + Number(right);\r\n                        }\r\n                    }\r\n                case '-':\r\n                    if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0 ||\r\n                        left.toString().indexOf(\"m\") >= 0 || right.toString().indexOf(\"m\") >= 0) {\r\n                        return fracobj.performFracOp(left.toString(), right.toString(), '-')\r\n                    }\r\n                    else {\r\n                        //run conditions\r\n                        if (condexps.StepExpressions.length == 0) {\r\n                            let dcntleft = util.countDecimals(left);\r\n                            let dcntright = util.countDecimals(right);\r\n                            //one of them are decimal\r\n                            if (dcntleft > 0 || dcntright > 0) {\r\n                                let rslt = Number(left) - Number(right);\r\n                                if (String(rslt).split(\".\").length > 1 && String(rslt).split(\".\")[1].length > 2) {\r\n                                    let dcnt = String(rslt).split(\".\")[1].length;\r\n                                    rslt = Number(Math.round(rslt + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n                                }\r\n                                else if (String(rslt).split(\".\").length < 2 || String(rslt).split(\".\")[1].length <= 2) {\r\n                                    rslt = Number(rslt).toFixed(2)\r\n                                }\r\n                                return rslt;\r\n                            }\r\n                            else {\r\n                                return Number(left) - Number(right);\r\n                            }\r\n                        }\r\n\r\n                        //TODO changes need for decimal...\r\n                        let ctxVarsCurLeft, ctxVarsCurRight\r\n                        ctxVarsCur = [];\r\n                        execVars(node.left);\r\n                        ctxVarsCurLeft = JSON.parse(JSON.stringify(ctxVarsCur));\r\n                        ctxVarsCur = [];\r\n                        execVars(node.right);\r\n                        ctxVarsCurRight = JSON.parse(JSON.stringify(ctxVarsCur));\r\n\r\n                        for (let i = 0; i < condexps.StepExpressions.length; i++) {\r\n                            if (condexps.StepExpressions[i].Expression.FunctionCall.args[0].Binary.operator == \">\") {\r\n                                if (condexps.StepExpressions[i].Expression.FunctionCall.args[0].Binary.left.Identifier == ctxVarsCurLeft[0] &&\r\n                                    condexps.StepExpressions[i].Expression.FunctionCall.args[0].Binary.right.Identifier == ctxVarsCurRight[0]) {\r\n                                    if (parseFloat(left) - parseFloat(right) < 0) {\r\n                                        let swap;\r\n                                        swap = context.Variables[ctxVarsCurLeft[0]];\r\n                                        context.Variables[ctxVarsCurLeft[0]] = context.Variables[ctxVarsCurRight[0]];\r\n                                        context.Variables[ctxVarsCurRight[0]] = swap;\r\n                                        return parseFloat(right) - parseFloat(left);\r\n                                    }\r\n                                    else {\r\n                                        return parseFloat(left) - parseFloat(right);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                case '*':\r\n                    if (right == 0 || left == 0) return 0;\r\n                    if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0 ||\r\n                        left.toString().indexOf(\"m\") >= 0 || right.toString().indexOf(\"m\") >= 0) {\r\n                        let val = fracobj.performFracOp(left.toString(), right.toString(), '*')\r\n                        return val;\r\n                    }\r\n                    else {\r\n                        let dcntleft = util.countDecimals(left);\r\n                        let dcntright = util.countDecimals(right);\r\n                        //one of them are decimal\r\n                        if (dcntleft > 0 || dcntright > 0) {\r\n                            let rslt = Number(left) * Number(right);\r\n                            if (String(rslt).split(\".\").length > 1 && String(rslt).split(\".\")[1].length > 2) {\r\n                                let dcnt = String(rslt).split(\".\")[1].length;\r\n                                rslt = Number(Math.round(rslt + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n                            }\r\n                            else if (String(rslt).split(\".\").length < 2 || String(rslt).split(\".\")[1].length <= 2) {\r\n                                rslt = Number(rslt).toFixed(2)\r\n                            }\r\n                            return rslt;\r\n                        }\r\n                        else {\r\n                            return Number(left) * Number(right);\r\n                        }\r\n                    }\r\n                // return parseFloat(left) * parseFloat(right);\r\n                // case '*':\r\n                //     return left * right;\r\n\r\n                case '/': {\r\n                    //as per the options\r\n                    //if the numbers are decimal convert them to proper numbers and\r\n                    //divide the \r\n                    if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0 ||\r\n                        left.toString().indexOf(\"m\") >= 0 || right.toString().indexOf(\"m\") >= 0) {\r\n                        //console.log(\"left:\" + left);\r\n                        //console.log(\"right:\" + right);\r\n                        let val = fracobj.performFracOp(left.toString(), right.toString(), '/')\r\n\r\n                        // let val = left * right;\r\n                        ///console.log(\"val:\" + val);\r\n                        return val;\r\n                    }\r\n\r\n                    let dcntleft = util.countDecimals(left);\r\n                    let dcntright = util.countDecimals(right);\r\n\r\n                    let dmfactor = 1;\r\n                    //one of them are decimal\r\n                    if (dcntleft > 0 || dcntright > 0) {\r\n                        //do the real numbers divison\r\n                        //change to non decimal\r\n\r\n                        if (dcntleft > 0 || dcntright > 0) {\r\n                            if (dcntleft > dcntright) {\r\n                                dmfactor = Math.pow(10, dcntleft);\r\n                            }\r\n                            else {\r\n                                dmfactor = Math.pow(10, dcntright);\r\n                            }\r\n                        }\r\n\r\n\r\n                        left = Number(left) * dmfactor;\r\n                        right = Number(right) * dmfactor;\r\n\r\n                        //change the context and rng mulity with dmfactor\r\n                        if (left % right == 0) {\r\n                            return performDivison(left, right, dmfactor);\r\n                        }\r\n\r\n                        console.log(\"contextVars Before:\" + JSON.stringify(context.Variables));\r\n                        //copy the context and recopy back\r\n                        let currentContext = JSON.parse(JSON.stringify(context.Variables));\r\n\r\n                        //console.log(\"contextVars Before:\" + JSON.stringify(context.Variables));\r\n\r\n                        //change the data range\r\n                        let currentDatarules = {};\r\n\r\n                        let ctxVarsCurLeft;\r\n                        let ctxVarsCurRight;\r\n                        ctxVarsCur = [];    //global variable\r\n                        execVars(node.left);\r\n                        ctxVarsCurLeft = JSON.parse(JSON.stringify(ctxVarsCur));\r\n                        ctxVarsCur = [];\r\n                        execVars(node.right);\r\n                        ctxVarsCurRight = JSON.parse(JSON.stringify(ctxVarsCur));\r\n\r\n                        /*\r\n                                                for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n                                                    if (datarules[ctxVarsCurLeft[i]] && datarules[ctxVarsCurLeft[i]].rng) {\r\n                                                        currentDatarules[ctxVarsCurLeft[i]] = JSON.parse(JSON.stringify(datarules[ctxVarsCurLeft[i]]));\r\n                                                    }\r\n                                                }\r\n                        \r\n                        \r\n                                                for (let i = 0; i < ctxVarsCurRight.length; i++) {\r\n                                                    if (datarules[ctxVarsCurRight[i]] && datarules[ctxVarsCurRight[i]].rng) {\r\n                                                        currentDatarules[ctxVarsCurRight[i]] = JSON.parse(JSON.stringify(datarules[ctxVarsCurRight[i]]));\r\n                                                    }\r\n                                                }\r\n                                                */\r\n\r\n                        // changeDatarules(ctxVarsCurLeft, ctxVarsCurRight);\r\n\r\n                        //multiply all the factors\r\n\r\n                        let isDivisable = getDivisable(node, left, right, dmfactor)\r\n\r\n                        /*\r\n                                                for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n                                                    if (currentDatarules[ctxVarsCurLeft[i]] && currentDatarules[ctxVarsCurLeft[i]].rng) {\r\n                                                        datarules[ctxVarsCurLeft[i]] = JSON.parse(JSON.stringify(currentDatarules[ctxVarsCurLeft[i]]));\r\n                                                    }\r\n                                                }\r\n                        \r\n                        \r\n                                                for (let i = 0; i < ctxVarsCurRight.length; i++) {\r\n                                                    if (currentDatarules[ctxVarsCurRight[i]] && currentDatarules[ctxVarsCurRight[i]].rng) {\r\n                                                        datarules[ctxVarsCurRight[i]] = JSON.parse(JSON.stringify(currentDatarules[ctxVarsCurRight[i]]));\r\n                                                    }\r\n                                                }\r\n                                                */\r\n\r\n                        if (!isDivisable) {\r\n                            context.Variables = JSON.parse(JSON.stringify(currentContext));\r\n                            console.log(\"Divisable false..contextVars Same as Before:\" + JSON.stringify(context.Variables));\r\n                            return performDivison(left, right, dmfactor);\r\n                        }\r\n\r\n                        //if (isDivisable) {  //difficult to match TODO long future\r\n                        //      left = exec(node.left) * dmfactor;\r\n                        //     right = exec(node.right) * dmfactor;\r\n\r\n                        for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n                            if (context.Variables[ctxVarsCurLeft[i]]) {\r\n                                context.Variables[ctxVarsCurLeft[i]] = context.Variables[ctxVarsCurLeft[i]].toFixed(dmfactor.toString().length - 1);\r\n                            }\r\n                        }\r\n\r\n\r\n                        for (let i = 0; i < ctxVarsCurRight.length; i++) {\r\n                            if (context.Variables[ctxVarsCurRight[i]]) {\r\n                                context.Variables[ctxVarsCurRight[i]] = context.Variables[ctxVarsCurRight[i]].toFixed(dmfactor.toString().length - 1);\r\n                            }\r\n                        }\r\n\r\n                        //    return performDivison(left, right,dmfactor);\r\n                        //}\r\n\r\n                        if (isDivisable) {\r\n                            console.log(\"Divisiable true..contextVars After:\" + JSON.stringify(context.Variables));\r\n\r\n                            //if the same context variables are responsible for the division which are already verified should not reRun\r\n                            //looping the main result is wrong. this check is needed.\r\n                            //required to reevaluate the step expression\r\n                            console.log(\"************Reevaluating the expression******************:\");\r\n                            throw new Error(\"ContextChanged\");\r\n                        }\r\n                    }\r\n\r\n                    if (left % right == 0) {\r\n                        return performDivison(left, right, dmfactor);\r\n                    }\r\n\r\n                    console.log(\"contextVars Before:\" + JSON.stringify(context.Variables));\r\n                    //copy the context and recopy back\r\n                    let currentContext = JSON.parse(JSON.stringify(context.Variables));\r\n\r\n                    let isDivisable = getDivisable(node, left, right, dmfactor);\r\n\r\n                    if (!isDivisable) {\r\n                        //keep the same context as original\r\n                        //left and right values stay same\r\n\r\n                        //note which context variables are tried for the divison\r\n                        //TODO long future should note which operations (a/b) (c/b) they changed\r\n                        context.Variables = JSON.parse(JSON.stringify(currentContext));\r\n                        console.log(\"Divisable false..contextVars Same as Before:\" + JSON.stringify(context.Variables));\r\n                        return performDivison(left, right, dmfactor);\r\n                    }\r\n\r\n                    if (isDivisable) {\r\n                        console.log(\"Divisiable true..contextVars After:\" + JSON.stringify(context.Variables));\r\n\r\n                        //if the same context variables are responsible for the division which are already verified should not reRun\r\n                        //looping the main result is wrong. this check is needed.\r\n                        //required to reevaluate the step expression\r\n                        console.log(\"************Reevaluating the expression******************:\");\r\n                        throw new Error(\"ContextChanged\");\r\n                    }\r\n                }\r\n                default:\r\n                    throw new SyntaxError('Unknown operator ' + node.operator);\r\n            }\r\n        }\r\n\r\n        if (node.hasOwnProperty('Unary')) {\r\n            node = node.Unary;\r\n            expr = exec(node.expression);\r\n            switch (node.operator) {\r\n                case '+':\r\n                    return expr;\r\n                case '-':\r\n                    return -expr;\r\n                default:\r\n                    throw new SyntaxError('Unknown operator ' + node.operator);\r\n            }\r\n        }\r\n\r\n        if (node.hasOwnProperty('String')) {\r\n            return node.String.slice(1, -1);\r\n        }\r\n\r\n        if (node.hasOwnProperty('Identifier')) {\r\n            if (context.Constants.hasOwnProperty(node.Identifier)) {\r\n                return context.Constants[node.Identifier];\r\n            }\r\n\r\n            if (context.Variables.hasOwnProperty(node.Identifier)) {\r\n                return context.Variables[node.Identifier];\r\n            }\r\n            else {\r\n                //set the random values for each identifier\r\n                //check the condition, range, fixed, compare\r\n                // context.Variables[node.Identifier] = util.getRandom(1, 99);\r\n\r\n                //console.log(\"context.datarules..\" + JSON.stringify(datarules[node.Identifier]));\r\n                //split the idntifier if it contains \r\n                if (node.Identifier.indexOf(\"_m_\") >= 0) {\r\n                    let ciden;\r\n                    if (node.Identifier.indexOf(\"c_\") >= 0) { //first digit is constant\r\n                        ciden = node.Identifier.split(\"c_\")[1];\r\n                    }\r\n                    else {\r\n                        ciden = node.Identifier;\r\n                    }\r\n                    let valm1 = ciden.split(\"_m_\")[0];\r\n                    let valf2 = ciden.split(\"_m_\")[1];\r\n                    let mfres = \"\";\r\n                    if (isNaN(valm1)) {\r\n                        if (!context.Variables.hasOwnProperty(valm1)) {\r\n                            context.Variables[valm1] = util.getRandomByRules(datarules[valm1]);\r\n                        }\r\n                        mfres = \"\" + context.Variables[valm1];\r\n                    }\r\n                    else {\r\n                        mfres = \"\" + valm1;\r\n                    }\r\n                    mfres = mfres + \"m\";\r\n                    let fres = process_f(valf2);\r\n                    mfres = mfres + fres;\r\n                    context.Variables[node.Identifier] = mfres;\r\n                    return mfres;\r\n                }\r\n                else if (node.Identifier.indexOf(\"_f_\") >= 0) {\r\n                    return process_f(node.Identifier);\r\n                }\r\n                else if (node.Identifier.indexOf(\"c_\") >= 0) {\r\n                    context.Variables[node.Identifier] = node.Identifier.split(\"c_\")[1];\r\n                    return context.Variables[node.Identifier];\r\n                }\r\n                else {\r\n                    context.Variables[node.Identifier] = util.getRandomByRules(datarules[node.Identifier])\r\n                    // context.Variables[node.Identifier] = util.getFromShuffle(node.Identifier);\r\n                    //   console.log(\"context.Variables..\" + JSON.stringify(context.Variables));\r\n                    return context.Variables[node.Identifier];\r\n                }\r\n\r\n            }\r\n            //throw new SyntaxError('Unknown identifier');\r\n        }\r\n        if (node.hasOwnProperty('Assignment')) {\r\n            right = exec(node.Assignment.value);\r\n            context.Variables[node.Assignment.name.Identifier] = right;\r\n            return right;\r\n        }\r\n\r\n        if (node.hasOwnProperty('FunctionCall')) {\r\n            expr = node.FunctionCall;\r\n            //already exists in the contextvariables return it\r\n            //because it is already processed\r\n\r\n            console.log(\"FunctionCall expr is \" + JSON.stringify(expr));\r\n            if (context.Variables[expr.name]) { //this is for only functions start with name step\r\n                console.log(\"returning the already evaluated value of \" + expr.name + \" which is \" + context.Variables[expr.name]);\r\n                return context.Variables[expr.name];\r\n            }\r\n\r\n            if (context.Functions.hasOwnProperty(expr.name)) {\r\n                if (expr.name == \"cond\") ctxRunCond = true;\r\n                console.log('node FunctionCall:' + expr.name + \"args.length:\" + expr.args.length)\r\n                args = [];\r\n                for (let i = 0; i < expr.args.length; i += 1) {\r\n                    //    console.log(\"args[\" + i + \"]:\" + expr.args[i]);\r\n                    args.push(exec(expr.args[i]));\r\n                }\r\n                return context.Functions[expr.name].apply(null, args);\r\n            }\r\n            throw new SyntaxError('Unknown function ' + expr.name);\r\n        }\r\n        throw new SyntaxError('Unknown syntax node');\r\n    }\r\n\r\n    function performDivison(left, right, dmfactor) {\r\n\r\n        /*\r\n        let rslt = Number(left) / Number(right);\r\n        if (String(rslt).split(\".\").length > 1) {\r\n            let dcnt = String(rslt).split(\".\")[1].length;\r\n            rslt = Number(Math.round(rslt + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n            return rslt;\r\n        }\r\n        else {\r\n            return rslt;\r\n        }\r\n       */\r\n\r\n        //change every thing to whole numbers\r\n        let rslt = Number(left) / Number(right);\r\n        if (String(rslt).split(\".\").length > 1 && String(rslt).split(\".\")[1].length > 2) {\r\n            let dcnt = String(rslt).split(\".\")[1].length;\r\n            rslt = Number(Math.round(rslt + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n        }\r\n        // else if (String(rslt).split(\".\").length < 2 || String(rslt).split(\".\")[1].length <= 2) {\r\n        //     rslt = Number(rslt).toFixed(2)\r\n        // }\r\n        else if (dmfactor > 1) {\r\n            rslt = Number(rslt).toFixed(2)\r\n        }\r\n        return rslt;\r\n\r\n    }\r\n\r\n    function getContextVars() {\r\n\r\n\r\n    }\r\n\r\n    function changeDatarules(ctxVarsCurLeft, ctxVarsCurRight) {\r\n        for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n            if (datarules[ctxVarsCurLeft[i]] && datarules[ctxVarsCurLeft[i]].rng) {\r\n                ///////////////////\r\n                let dcntmin = util.countDecimals(datarules[ctxVarsCurLeft[i]].rng[0]);\r\n                let dcntmax = util.countDecimals(datarules[ctxVarsCurLeft[i]].rng[1]);\r\n                let dmfactmm = 0;\r\n\r\n                if (dcntmin > 0 || dcntmax > 0) {\r\n                    if (dcntmax > dcntmin) {\r\n                        dmfactmm = Math.pow(10, dcntmax);\r\n                    }\r\n                    else {\r\n                        dmfactmm = Math.pow(10, dcntmin);\r\n                    }\r\n                }\r\n\r\n                if (dmfactmm != 0) {\r\n                    datarules[ctxVarsCurLeft[i]].rng[0] = Number(datarules[ctxVarsCurLeft[i]].rng[0]) * dmfactmm;\r\n                    datarules[ctxVarsCurLeft[i]].rng[1] = Number(datarules[ctxVarsCurLeft[i]].rng[1]) * dmfactmm;\r\n                }\r\n                //////////////////\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < ctxVarsCurRight.length; i++) {\r\n            if (datarules[ctxVarsCurRight[i]] && datarules[ctxVarsCurRight[i]].rng) {\r\n                ///////////////////\r\n                let dcntmin = util.countDecimals(datarules[ctxVarsCurRight[i]].rng[0]);\r\n                let dcntmax = util.countDecimals(datarules[ctxVarsCurRight[i]].rng[1]);\r\n                let dmfactmm = 0;\r\n\r\n                if (dcntmin > 0 || dcntmax > 0) {\r\n                    if (dcntmax > dcntmin) {\r\n                        dmfactmm = Math.pow(10, dcntmax);\r\n                    }\r\n                    else {\r\n                        dmfactmm = Math.pow(10, dcntmin);\r\n                    }\r\n                }\r\n\r\n                if (dmfactmm != 0) {\r\n                    datarules[ctxVarsCurRight[i]].rng[0] = Number(datarules[ctxVarsCurRight[i]].rng[0]) * dmfactmm;\r\n                    datarules[ctxVarsCurRight[i]].rng[1] = Number(datarules[ctxVarsCurRight[i]].rng[1]) * dmfactmm;\r\n                }\r\n                //////////////////\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDivisable(node, left, right, dmfactor) {\r\n\r\n        left = parseFloat(left);\r\n        right = parseFloat(right);\r\n\r\n        let isDivisable;\r\n        let ctxVarsCurLeft;\r\n        let ctxVarsCurRight;\r\n        let ctxVarsCommon;\r\n        let ctxVarsCommonEqn;\r\n        isDivisable = false;\r\n        ctxVarsCur = [];    //global variable\r\n        execVars(node.left);\r\n        ctxVarsCurLeft = JSON.parse(JSON.stringify(ctxVarsCur));\r\n        ctxVarsCur = [];\r\n        execVars(node.right);\r\n        ctxVarsCurRight = JSON.parse(JSON.stringify(ctxVarsCur));\r\n        //change which are in left and right\r\n        ctxVarsCommon = [];\r\n        for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n            for (let j = 0; j < ctxVarsCurRight.length; j++) {\r\n                if (!(ctxVarsCurLeft[i].indexOf(\"step\") >= 0)) {\r\n                    if (ctxVarsCurLeft[i] == ctxVarsCurRight[j]) {\r\n                        ctxVarsCommon.push(ctxVarsCurLeft[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let ctxVarsCurLeftOnly;\r\n        let ctxVarsCurRightOnly;\r\n        ctxVarsCurLeftOnly = [];\r\n        let isExists = true;\r\n        for (let i = 0; i < ctxVarsCurLeft.length; i++) {\r\n            isExists = false;\r\n            for (let k = 0; k < ctxVarsCommon.length; k++) {\r\n                if (ctxVarsCurLeft[i] == ctxVarsCommon[k])\r\n                    isExists = true;\r\n            }\r\n            if (!isExists) {\r\n                if (!(ctxVarsCurLeft[i].indexOf(\"step\") >= 0)) {\r\n                    ctxVarsCurLeftOnly.push(ctxVarsCurLeft[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        ctxVarsCurRightOnly = [];\r\n        for (let j = 0; j < ctxVarsCurRight.length; j++) {\r\n            isExists = false;\r\n            for (let k = 0; k < ctxVarsCommon.length; k++) {\r\n                if (ctxVarsCurRight[j] == ctxVarsCommon[k])\r\n                    isExists = true;\r\n            }\r\n            if (!isExists) {\r\n                if (!(ctxVarsCurRight[j].indexOf(\"step\") >= 0)) {\r\n                    ctxVarsCurRightOnly.push(ctxVarsCurRight[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        ////////////////////////////////////COMMON C O M M O N V A R I A B L E S/////////////\r\n        if (!isDivisable) {\r\n            console.log(\"ctxVarsCommon:\" + JSON.stringify(ctxVarsCommon));\r\n            for (let i = 0; i < ctxVarsCommon.length; i++) {\r\n                if (!(ctxVarsCommon[i].indexOf(\"step\") >= 0)) {\r\n                    isDivisable = process_variable(node, ctxVarsCommon[i], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///////////////////////////////// LEFT and RIGHT  V A R I A B L E S//////////////////////////////////////////////////\r\n        if (ctxVarsCurRightOnly.length < ctxVarsCurLeftOnly.length) {\r\n            if (!isDivisable) {\r\n                for (let i = 0; i < ctxVarsCurRightOnly.length; i++) {\r\n                    isDivisable = process_variable(node, ctxVarsCurRightOnly[i], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!isDivisable) {\r\n                for (let i = 0; i < ctxVarsCurLeftOnly.length; i++) {\r\n                    isDivisable = process_variable(node, ctxVarsCurLeftOnly[i], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (!isDivisable) {\r\n                for (let i = 0; i < ctxVarsCurLeftOnly.length; i++) {\r\n                    isDivisable = process_variable(node, ctxVarsCurLeftOnly[i], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!isDivisable) {\r\n                for (let i = 0; i < ctxVarsCurRightOnly.length; i++) {\r\n                    isDivisable = process_variable(node, ctxVarsCurRightOnly[i], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        ///////////////////////////////// LEFT and RIGHT  V A R I A B L E S//////////////////////////////////////////////////\r\n        if (!isDivisable) {\r\n            console.log(\"ctxVarsCurRightOnly:\" + JSON.stringify(ctxVarsCurRightOnly));\r\n            for (let i = 0; i < ctxVarsCurLeftOnly.length; i++) {\r\n                for (let j = 0; j < ctxVarsCurRightOnly.length; j++) {\r\n                    isDivisable = process_variables(node, ctxVarsCurLeftOnly[i], ctxVarsCurRightOnly[j], dmfactor);\r\n                    if (isDivisable) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (isDivisable) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return isDivisable;\r\n    }\r\n\r\n\r\n    function getNext(ctxVarsCur, curNum, minNum, maxNum) {\r\n        if (!ctxVarsCur) return curNum;\r\n        if (curNum < maxNum) {\r\n            curNum = curNum + 1;\r\n        }\r\n        else if (curNum == maxNum) {\r\n            curNum = minNum;\r\n        }\r\n        return curNum;\r\n    }\r\n\r\n    function getNextValue(ctxVarsCur, curNum) {\r\n        if (!ctxVarsCur) return curNum;\r\n        let newdivchkeqn, neweqn;\r\n        /////////////////////////////START EQN LOGIC ///////////////////////////\r\n        if (datarules[ctxVarsCur] && datarules[ctxVarsCur].eqn) {\r\n            if (datarules[ctxVarsCur].eqn.indexOf(\"/\") > 0) {\r\n                newdivchkeqn = datarules[ctxVarsCur].eqn.replace(/(\\/)/g, function replacer(match, $1) {\r\n                    //return \"%\" + \"\";\r\n                    return \"*\" + \"\";\r\n                });\r\n                neweqn = newdivchkeqn.replace(/(n)/g, function replacer(match, $1) {\r\n                    return curNum + \"\";\r\n                });\r\n                curNum = eval(neweqn);\r\n                /*\r\n                while (eval(neweqn) !== 0) {\r\n                    curNum = curNum + 1;\r\n                    neweqn = newdivchkeqn.replace(/(n)/g, function replacer(match, $1) {\r\n                        return curNum + \"\";\r\n                    });\r\n                }\r\n                */\r\n            }\r\n            else {  //other than division\r\n                neweqn = datarules[ctxVarsCur].eqn.replace(/(n)/g, function replacer(match, $1) {\r\n                    return curNum + \"\";\r\n                });\r\n                curNum = eval(neweqn);\r\n            }\r\n        }\r\n        return curNum;\r\n    }\r\n\r\n\r\n    function process_variable(node, ctxVarsCommon, dmfactor) {\r\n        let min, max, startNum;\r\n        let commonNum, commonVal;\r\n        let left, right;\r\n        if (datarules[ctxVarsCommon] && datarules[ctxVarsCommon].rng) {\r\n            min = parseFloat(datarules[ctxVarsCommon].rng[0]) * dmfactor;\r\n            max = parseFloat(datarules[ctxVarsCommon].rng[1]) * dmfactor;\r\n        }\r\n        else {\r\n            min = 1;\r\n            max = 99;\r\n        }\r\n        commonNum = parseFloat(util.getRandom(min, max));\r\n        commonVal = getNextValue(ctxVarsCommon, commonNum);\r\n\r\n        context.Variables[ctxVarsCommon] = commonVal / dmfactor;\r\n\r\n        left = exec(node.left) * dmfactor;\r\n        right = exec(node.right) * dmfactor;\r\n\r\n\r\n        if (left % right == 0) {\r\n            if (left > 0 && right > 0 && left != right && right != 1) {\r\n                return true;\r\n            }\r\n        }\r\n        startNum = commonNum;\r\n        commonNum = getNext(ctxVarsCommon, commonNum, min, max);\r\n        while (startNum != commonNum) {\r\n            commonVal = getNextValue(ctxVarsCommon, commonNum);\r\n            context.Variables[ctxVarsCommon] = commonVal / dmfactor;\r\n            left = exec(node.left) * dmfactor;\r\n            right = exec(node.right) * dmfactor;\r\n            if (left % right == 0) {\r\n                if (left > 0 && right > 0 && left != right && right != 1) {\r\n                    return true;\r\n                }\r\n            }\r\n            commonNum = getNext(ctxVarsCommon, commonNum, min, max);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    function process_variables(node, ctxVarsleft, ctxVarsright) {\r\n        let minl, maxl;\r\n        let minr, maxr;\r\n        let leftNum, rightNum;\r\n        let left, right;\r\n        let leftVal, rightVal;\r\n        if (datarules[ctxVarsleft] && datarules[ctxVarsleft].rng) {\r\n            minl = parseFloat(datarules[ctxVarsleft].rng[0]);\r\n            maxl = parseFloat(datarules[ctxVarsleft].rng[1]);\r\n        }\r\n        else {\r\n            minl = 1;\r\n            maxl = 99;\r\n        }\r\n\r\n        if (datarules[ctxVarsright] && datarules[ctxVarsright].rng) {\r\n            minr = parseFloat(datarules[ctxVarsright].rng[0]);\r\n            maxr = parseFloat(datarules[ctxVarsright].rng[1]);\r\n        }\r\n        else {\r\n            minr = 1;\r\n            maxr = 99;\r\n        }\r\n\r\n\r\n        leftNum = parseFloat(util.getRandom(minl, maxl));\r\n        left = getNextValue(ctxVarsleft, leftNum);\r\n\r\n        rightNum = parseFloat(util.getRandom(minl, maxl));\r\n        right = getNextValue(ctxVarsright, rightNum);\r\n\r\n        context.Variables[ctxVarsleft] = left;\r\n        context.Variables[ctxVarsright] = right;\r\n\r\n        if (node.left.Identifier) left = exec(node.left);\r\n        if (node.right.Identifier) right = exec(node.right);\r\n\r\n        if (leftVal % rightVal == 0) {\r\n            if (leftVal > 0 && rightVal > 0 && leftVal != rightVal && rightVal != 1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        let startNuml = leftNum;\r\n        let startNumr = rightNum;\r\n        leftNum = getNext(ctxVarsleft, leftNum, minl, maxl);\r\n        while (leftNum != startNuml) {\r\n            left = getNextValue(ctxVarsleft, leftNum);\r\n            context.Variables[ctxVarsleft] = left;\r\n            if (node.left.Identifier) left = exec(node.left);\r\n            if (node.right.Identifier) right = exec(node.right);\r\n            if (leftVal % rightVal == 0) {\r\n                if (leftVal > 0 && rightVal > 0 && leftVal != rightVal && rightVal != 1) {\r\n                    return true;\r\n                }\r\n            }\r\n            rightNum = startNumr;\r\n            rightNum = getNext(ctxVarsright, rightNum, minr, maxr);\r\n            while (rightNum != startNumr) {\r\n                right = getNextValue(ctxVarsright, rightNum);\r\n                context.Variables[ctxVarsright] = right;\r\n                if (node.left.Identifier) left = exec(node.left);\r\n                if (node.right.Identifier) right = exec(node.right);\r\n                if (leftVal % rightVal == 0) {\r\n                    if (leftVal > 0 && rightVal > 0 && leftVal != rightVal && rightVal != 1) {\r\n                        return true;\r\n                    }\r\n                }\r\n                rightNum = getNext(ctxVarsright, rightNum, minr, maxr);\r\n            }\r\n\r\n            leftNum = getNext(ctxVarsleft, leftNum, minl, maxl);\r\n        }\r\n\r\n        /*\r\n       rightNum = getNext(ctxVarsright, rightNum, minr, maxr);       \r\n       while (rightNum != startNumr) {\r\n           right = getNextValue(ctxVarsright,rightNum);\r\n           context.Variables[ctxVarsright] = right;\r\n            leftVal = exec(node.left);\r\n            rightVal = exec(node.right);\r\n             if (leftVal % rightVal == 0) {\r\n               if (leftVal > 0 && rightVal > 0 && leftVal != rightVal && rightVal !=1) {\r\n                   return true;\r\n               }\r\n            } \r\n           //////////////////////////////////////////////////\r\n           leftNum = startNuml;\r\n           leftNum = getNext(ctxVarsleft, leftNum, minl, maxl);\r\n           while (leftNum != startNuml) {\r\n                left = getNextValue(ctxVarsleft,leftNum);\r\n                  context.Variables[ctxVarsleft] = left;\r\n    \r\n            leftVal = exec(node.left);\r\n            rightVal = exec(node.right);\r\n    \r\n             if (leftVal % rightVal == 0) {\r\n               if (leftVal > 0 && rightVal > 0 && leftVal != rightVal && rightVal !=1) {\r\n                   return true;\r\n               }\r\n            } \r\n    \r\n               leftNum = getNext(ctxVarsleft, leftNum, minl, maxl);\r\n           }\r\n    \r\n           rightNum = getNext(ctxVarsright, rightNum, minr, maxr);\r\n       }\r\n       */\r\n        return false;\r\n    }\r\n\r\n    function process_f(fracidentifier) {\r\n        let ciden;\r\n        if (fracidentifier.indexOf(\"c_\") >= 0) { //first digit is constant\r\n            ciden = fracidentifier.split(\"c_\")[1];\r\n        }\r\n        else {\r\n            ciden = fracidentifier;\r\n        }\r\n\r\n        let val1 = ciden.split(\"_f_\")[0];\r\n        let val2 = ciden.split(\"_f_\")[1];\r\n        let fres = \"\";\r\n\r\n        if (isNaN(val1)) {\r\n            if (!context.Variables.hasOwnProperty(val1)) {\r\n                context.Variables[val1] = util.getRandomByRules(datarules[val1]);\r\n            }\r\n            fres = \"\" + context.Variables[val1];\r\n        }\r\n        else {\r\n            fres = \"\" + val1;\r\n        }\r\n\r\n        fres = fres + \"f\";\r\n\r\n        if (isNaN(val2)) {\r\n            if (!context.Variables.hasOwnProperty(val2)) {\r\n                context.Variables[val2] = util.getRandomByRules(datarules[val2]);\r\n            }\r\n            fres = fres + context.Variables[val2];\r\n        }\r\n        else {\r\n            fres = fres + val2;\r\n        }\r\n        context.Variables[fracidentifier] = fres;\r\n        return fres;\r\n    }\r\n\r\n    function evaluate(expr, dr, uc) {\r\n        // context.Variables = {};\r\n        // stepTokens = [];\r\n        // stepResults = {};\r\n        setDataRules(dr);\r\n\r\n        setUseCase(uc);\r\n\r\n        console.log(\"******************** Evaluate Conditions ********************\");\r\n        console.log(\"expr..\" + JSON.stringify(expr));\r\n        console.log(\"******************** Evaluate Conditions ********************\");\r\n\r\n        condexps = parser.parseStep(expr, \"cond\");\r\n        for (let i = 0; i < condexps.StepExpressions.length; i++) {\r\n            //console.log(\"StepExpressions:step-\" + stepidx + \":Exp-\" + i + \":\" + JSON.stringify(tree.StepExpressions[i]));\r\n            let result;\r\n            let reRun = true;\r\n            while (reRun) {\r\n                try {\r\n                    result = exec(condexps.StepExpressions[i]);\r\n                    reRun = false;\r\n                }\r\n                catch (e) {\r\n                    //this happens only based on check of all the possibilites\r\n                    //no chance here to infinite loop set else condition reRun false\r\n                    if (e.message == \"ContextChanged\") {\r\n                        reRun = true;\r\n                        //reexecuted the expression\r\n                        console.log(\"Reexecuting the StepExpressions...step\" + stepidx);\r\n                        //  result = exec(tree.StepExpressions[i]);\r\n                        // }\r\n                    }\r\n                    else {\r\n                        reRun = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        console.log(\"******************** Evaluate Steps ********************\");\r\n        console.log(\"expr..\" + JSON.stringify(expr));\r\n        console.log(\"******************** Evaluate Steps ********************\");\r\n\r\n        let stepidx = 1;\r\n        // let resultobj = {};\r\n        // let tokenobj = {};\r\n        // let resultToken = [];\r\n        let resultArr;\r\n        let reRun\r\n        tree = parser.parseStep(expr, \"step\" + stepidx);\r\n        while (tree.StepExpressions && tree.StepExpressions.length > 0) {\r\n            resultArr = new Array;\r\n            for (let i = 0; i < tree.StepExpressions.length; i++) {\r\n                //console.log(\"StepExpressions:step-\" + stepidx + \":Exp-\" + i + \":\" + JSON.stringify(tree.StepExpressions[i]));\r\n                let result\r\n                reRun = true;\r\n                while (reRun) {\r\n                    try {\r\n                        result = exec(tree.StepExpressions[i]);\r\n                        reRun = false;\r\n                    }\r\n                    catch (e) {\r\n                        //this happens only based on check of all the possibilites\r\n                        //no chance here to infinite loop set else condition reRun false\r\n                        if (e.message == \"ContextChanged\") {\r\n                            reRun = true;\r\n                            //reexecuted the expression\r\n                            console.log(\"Reexecuting the StepExpressions...step\" + stepidx);\r\n                            //  result = exec(tree.StepExpressions[i]);\r\n                            // }\r\n                        }\r\n                        else {\r\n                            reRun = false;\r\n                        }\r\n                    }\r\n                }\r\n                context.Variables[\"step\" + stepidx] = result;\r\n                console.log(\"context.Variables:\" + JSON.stringify(context.Variables));\r\n                resultArr.push(result);\r\n            }\r\n            let robj = { \"Result\": resultArr };\r\n            resultobj[\"step\" + stepidx] = robj;\r\n            //  resultToken.push(robj);\r\n            //   console.log(\"result:\" + result);\r\n            //   console.log(\"context.Variables:step-\" + i + 1 + \":\" + JSON.stringify(context.Variables));\r\n            // }\r\n            let tObj = { \"Token\": tree.StepTokens };\r\n            tokenobj[\"step\" + stepidx] = tObj;\r\n            //console.log(\"tokenobj:step-\" + stepidx + \":\" + JSON.stringify(tokenobj));\r\n\r\n            //resultobj[\"step\" + stepidx] = resultToken;\r\n            // stepTokens.push(tokenobj);\r\n            //stepResults.push(resultobj);\r\n            stepidx = stepidx + 1;\r\n            tree = parser.parseStep(expr, \"step\" + stepidx);\r\n        }\r\n\r\n        console.log(\"******************** Evaluate Main ********************\");\r\n        var tokens = parser.getTokens(expr);\r\n        //console.log(\"Main Token:\" + JSON.stringify(tokens));\r\n        //wrapper\r\n        let resTokenObj = { \"Token\": tokens };\r\n        // let resTokenArr = [];\r\n        // resTokenArr.push(resTokenObj);\r\n        tokenobj[\"main\"] = resTokenObj;\r\n        //stepTokens.push({\"main\":resTokenObj});\r\n\r\n        var tree = parser.parse(expr);\r\n        let resultMain;\r\n        reRun = true;\r\n        cnt = 10; //safe side to exit. Infine loop  is happening with same expression continuing multiple times...\r\n        while (reRun && cnt > 0) {\r\n            try {\r\n                cnt--;\r\n                //could be array resulted from the functions sotrlh,sorthl\r\n                resultMain = exec(tree);\r\n                reRun = false;\r\n            }\r\n            catch (e) {\r\n                //this happens only based on check of all the possibilites\r\n                //no chance here to infinite loop set else condition reRun false\r\n                if (e.message == \"ContextChanged\") {\r\n                    reRun = true;\r\n                    console.log(\"Reexecuting the main with new context\");\r\n                    //  result = exec(tree.StepExpressions[i]);\r\n                    // }\r\n                }\r\n                else {\r\n                    reRun = false;\r\n                }\r\n            }\r\n        }\r\n        if (Object.prototype.toString.call(resultMain) === '[object Array]') {\r\n            resultMain = resultMain.map(a => { return \"\" + a })\r\n        }\r\n        else {\r\n            resultMain = util.trm(resultMain.toString(), \"__\");\r\n        }\r\n        resultobj[\"main\"] = { \"Result\": resultMain };\r\n        //console.log(\"Main tree..\" + JSON.stringify(tree));\r\n        // stepResults[\"Results\"] = resultobj;\r\n        //console.log(\"stepTokens..\" + JSON.stringify(tokenobj));\r\n        //console.log(\"stepResults..\" + JSON.stringify(resultobj));\r\n    }\r\n\r\n    function data() {\r\n        return context.Variables;\r\n    }\r\n\r\n    function setDataRules(dr) {\r\n        datarules = dr;\r\n    }\r\n\r\n    function setUseCase(uc) {\r\n        usecase = uc;\r\n    }\r\n\r\n    function tokens() {\r\n        return tokenobj;\r\n    }\r\n\r\n    function results() {\r\n        return resultobj;\r\n    }\r\n\r\n    return {\r\n        evaluate: evaluate, //results of main and steps\r\n        results: results,\r\n        data: data,  //all variables and values\r\n        tokens: tokens //all tokens of main and steps\r\n    };\r\n};\r\n/////////Parser /////////////\r\nTapDigit.Parser = function () {\r\n\r\n    let lexer = new TapDigit.Lexer(),\r\n        T = TapDigit.Token;\r\n\r\n    let lexerstep = new TapDigit.Lexer();\r\n    function matchOp(token, op) {\r\n        return (typeof token !== 'undefined') &&\r\n            token.type === T.Operator &&\r\n            token.value === op;\r\n    }\r\n\r\n    // ArgumentList := Expression |\r\n    //                 Expression ',' ArgumentList\r\n    function parseArgumentList() {\r\n        let token, expr, args = [];\r\n\r\n        while (true) {\r\n            expr = parseExpression();\r\n            if (typeof expr === 'undefined') {\r\n                // TODO maybe throw exception?\r\n                break;\r\n            }\r\n            args.push(expr);\r\n            token = lexer.peek();\r\n            if (!matchOp(token, ',')) {\r\n                break;\r\n            }\r\n            lexer.next();\r\n        }\r\n\r\n        return args;\r\n    }\r\n\r\n    function parseArgument() {\r\n        let token, expr, args = [];\r\n\r\n        while (true) {\r\n            expr = parseExpression();\r\n            if (typeof expr === 'undefined') {\r\n                // TODO maybe throw exception?\r\n                break;\r\n            }\r\n            args.push(expr);\r\n            token = lexer.peek();\r\n            if (!matchOp(token, ',')) {\r\n                break;\r\n            }\r\n            lexer.next();\r\n        }\r\n\r\n        return args[0];\r\n    }\r\n\r\n    // FunctionCall ::= Identifier '(' ')' ||\r\n    //                  Identifier '(' ArgumentList ')'\r\n    function parseFunctionCall(name) {\r\n        let token, args = [], arg = {};\r\n\r\n        token = lexer.next();\r\n        if (!matchOp(token, '(')) {\r\n            throw new SyntaxError('Expecting ( in a function call \"' + name + '\"');\r\n        }\r\n\r\n        token = lexer.peek();\r\n        if (!matchOp(token, ')')) {\r\n            if (name.indexOf(\"step\") >= 0) {\r\n                arg = parseArgument();\r\n            }\r\n            else {\r\n                args = parseArgumentList();\r\n            }\r\n        }\r\n\r\n        token = lexer.next();\r\n        if (!matchOp(token, ')')) {\r\n            throw new SyntaxError('Expecting ) in a function call \"' + name + '\"');\r\n        }\r\n        if (name.indexOf(\"step\") >= 0) {\r\n            return arg;\r\n        }\r\n        else {\r\n            return {\r\n                'FunctionCall': {\r\n                    'name': name,\r\n                    'args': args\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Primary ::= Identifier |\r\n    //             Number |\r\n    //             '(' Assignment ')' |\r\n    //             FunctionCall\r\n    function parsePrimary() {\r\n        let token, expr;\r\n\r\n        token = lexer.peek();\r\n\r\n        if (typeof token === 'undefined') {\r\n            throw new SyntaxError('Unexpected termination of expression');\r\n        }\r\n\r\n        if (token.type === T.Identifier) {\r\n            token = lexer.next();\r\n            if (matchOp(lexer.peek(), '(')) {\r\n                return parseFunctionCall(token.value);\r\n            } else {\r\n                return {\r\n                    'Identifier': token.value\r\n                };\r\n            }\r\n        }\r\n\r\n        if (token.type === T.Number) {\r\n            token = lexer.next();\r\n            return {\r\n                'Number': token.value\r\n            };\r\n        }\r\n\r\n        if (token.type === T.String) {\r\n            token = lexer.next();\r\n            return {\r\n                'String': token.value\r\n            };\r\n        }\r\n\r\n        if (matchOp(token, '(')) {\r\n            lexer.next();\r\n            expr = parseAssignment();\r\n            token = lexer.next();\r\n            if (!matchOp(token, ')')) {\r\n                throw new SyntaxError('Expecting )');\r\n            }\r\n            return {\r\n                'Expression': expr\r\n            };\r\n        }\r\n\r\n        throw new SyntaxError('Parse error, can not process token ' + token.value);\r\n    }\r\n\r\n    // Unary ::= Primary |\r\n    //           '-' Unary\r\n    function parseUnary() {\r\n        let token, expr;\r\n\r\n        token = lexer.peek();\r\n        if (matchOp(token, '-') || matchOp(token, '+')) {\r\n            token = lexer.next();\r\n            expr = parseUnary();\r\n            return {\r\n                'Unary': {\r\n                    operator: token.value,\r\n                    expression: expr\r\n                }\r\n            };\r\n        }\r\n\r\n        return parsePrimary();\r\n    }\r\n\r\n    // Multiplicative ::= Unary |\r\n    //                    Multiplicative '*' Unary |\r\n    //                    Multiplicative '/' Unary\r\n    function parseMultiplicative() {\r\n        let token, expr;\r\n        expr = parseUnary();\r\n        token = lexer.peek();\r\n        while (matchOp(token, '*') || matchOp(token, '/')) {\r\n            token = lexer.next();\r\n            expr = {\r\n                'Binary': {\r\n                    operator: token.value,\r\n                    left: expr,\r\n                    right: parseUnary()\r\n                }\r\n            };\r\n            token = lexer.peek();\r\n        }\r\n        return expr;\r\n    }\r\n\r\n\r\n    // Multiplicative ::= Unary |\r\n    //                    Multiplicative '*' Unary |\r\n    //                    Multiplicative '/' Unary\r\n    function parseRelation() {\r\n        let token, expr;\r\n        expr = parseAdditive();\r\n        token = lexer.peek();\r\n        while (matchOp(token, '<') || matchOp(token, '>')) {\r\n            token = lexer.next();\r\n            expr = {\r\n                'Binary': {\r\n                    operator: token.value,\r\n                    left: expr,\r\n                    right: parseAdditive()\r\n                }\r\n            };\r\n            token = lexer.peek();\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    // Multiplicative ::= Unary |\r\n    //                    Multiplicative '*' Unary |\r\n    //                    Multiplicative '/' Unary\r\n    function parseConcat() {\r\n        let token, expr;\r\n        expr = parseRelation();\r\n        token = lexer.peek();\r\n        while (matchOp(token, ':')) {\r\n            token = lexer.next();\r\n            expr = {\r\n                'Binary': {\r\n                    operator: token.value,\r\n                    left: expr,\r\n                    right: parseRelation()\r\n                }\r\n            };\r\n            token = lexer.peek();\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    // Additive ::= Multiplicative |\r\n    //              Additive '+' Multiplicative |\r\n    //              Additive '-' Multiplicative\r\n    function parseAdditive() {\r\n        let token, expr;\r\n        expr = parseMultiplicative();\r\n        token = lexer.peek();\r\n        while (matchOp(token, '+') || matchOp(token, '-')) {\r\n            token = lexer.next();\r\n            expr = {\r\n                'Binary': {\r\n                    operator: token.value,\r\n                    left: expr,\r\n                    right: parseMultiplicative()\r\n                }\r\n            };\r\n            token = lexer.peek();\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    // Assignment ::= Identifier '=' Assignment |\r\n    //                Additive\r\n    function parseAssignment() {\r\n        let token, expr;\r\n\r\n        expr = parseConcat();\r\n\r\n        if (typeof expr !== 'undefined' && expr.Identifier) {\r\n            token = lexer.peek();\r\n            if (matchOp(token, '=')) {\r\n                lexer.next();\r\n                return {\r\n                    'Assignment': {\r\n                        name: expr,\r\n                        value: parseAssignment()\r\n                    }\r\n                };\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // Expression ::= Assignment\r\n    function parseExpression() {\r\n        return parseAssignment();\r\n    }\r\n\r\n    function parse(expression) {\r\n        var expr, token;\r\n\r\n        lexer.reset(expression);\r\n        expr = parseExpression();\r\n\r\n        token = lexer.next();\r\n        if (typeof token !== 'undefined') {\r\n            throw new SyntaxError('Unexpected token ' + token.value);\r\n        }\r\n\r\n        return {\r\n            'Expression': expr\r\n        };\r\n    }\r\n\r\n    //not using this one\r\n    function getAllTokens(expr) {\r\n        let token;\r\n        let tokens = [];\r\n        lexerstep.reset(expr);\r\n        while (true) {\r\n            token = lexerstep.next();\r\n            if (typeof token === 'undefined') {\r\n                break;\r\n            }\r\n            tokens.push(token);\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function getTokens(expr) {\r\n        let token;\r\n        let tokens = [];\r\n        lexerstep.reset(expr);\r\n        while (true) {\r\n            token = lexerstep.next();\r\n            if (typeof token === 'undefined') {\r\n                break;\r\n            }\r\n            if (token.type === T.Identifier && token.value.indexOf(\"step\") >= 0) {\r\n\r\n            }\r\n            else {\r\n                tokens.push(token);\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function getStepTokens(expr, stepname) {\r\n        let token;\r\n        let bHitStep = false;\r\n        let steptokens = [];\r\n        let tokensObj = {};\r\n        let tokens = [];\r\n        lexerstep.reset(expr);\r\n        token = lexerstep.peek();\r\n        while (typeof token !== 'undefined') {\r\n            // console.log(\"eqn token:\" + JSON.stringify(token));\r\n            token = lexerstep.next();\r\n            if (stepname == token.value && matchOp(lexerstep.peek(), '(')) {\r\n                bHitStep = true;\r\n            }\r\n            if (bHitStep) {\r\n                tokens.push(token);\r\n            }\r\n            if (bHitStep && matchOp(lexerstep.peek(), ')')) {\r\n                token = lexerstep.next();\r\n                tokens.push(token);\r\n                steptokens.push(tokens);\r\n                tokens = [];\r\n                bHitStep = false;\r\n            }\r\n            token = lexerstep.peek();\r\n        }\r\n        // console.log(\"eqn tkns:\" + JSON.stringify(steptokens));\r\n        return steptokens;\r\n    }\r\n\r\n    function parseStep(expression, stepname) {\r\n        var expr, token, steptokens;\r\n        // expr = \"\";\r\n        expr = new Array;\r\n        lexer.reset(expression);\r\n\r\n        token = lexer.peek();\r\n        while (typeof token !== 'undefined') {\r\n            //console.log(\"token:\" + JSON.stringify(token));\r\n            if (token.type === T.Identifier) {\r\n                token = lexer.next();\r\n                if (matchOp(lexer.peek(), '(')) {\r\n                    if (stepname == token.value) {\r\n                        let result = parseFunctionCall(token.value);\r\n                        let wrapResult = { 'Expression': result };\r\n                        expr.push(wrapResult);\r\n                        // console.log(\"expr-\" + JSON.stringify(expr));\r\n                    }\r\n                }\r\n            }\r\n            token = lexer.next();\r\n            token = lexer.peek();\r\n        }\r\n\r\n        steptokens = getStepTokens(expression, stepname);\r\n        return {\r\n            'StepExpressions': expr,\r\n            'StepTokens': steptokens\r\n        };\r\n    }\r\n    return {\r\n        parse: parse,\r\n        getTokens: getTokens,\r\n        parseStep: parseStep\r\n    };\r\n};\r\n///////////\r\nTapDigit.Fractions = function (ctx) {\r\n\r\n    function initFract() {\r\n        let opd = {};\r\n        opd.oprdN = 0;\r\n        opd.oprdD = 1;\r\n        return opd;\r\n    }\r\n\r\n    function getFrac(opd) {\r\n        let opdr = {};\r\n\r\n        if (opd.indexOf(\"m\") >= 0) {\r\n            let opdmixed = opd.split(\"m\");\r\n            let opdm = opdmixed[0];\r\n            let opdf = opdmixed[1];\r\n\r\n            if (opdf.indexOf(\"f\") >= 0) {\r\n                let opdparts = opdf.split(\"f\");\r\n                if (opdparts[0] == \"\" || opdparts[1] == \"\") {\r\n                    opdr.oprdN = 0;\r\n                    opdr.oprdD = 1;\r\n                }\r\n                else {\r\n                    opdr.oprdN = parseFloat(opdparts[0]);\r\n                    opdr.oprdD = parseFloat(opdparts[1]);\r\n                }\r\n            }\r\n            else { //plain number\r\n                opdr.oprdN = parseFloat(opd);\r\n                opdr.oprdD = 1;\r\n            }\r\n            //conver to Fractions\r\n            opdr.oprdN = opdr.oprdN + opdr.oprdD * parseFloat(opdm);\r\n        }\r\n        else if (opd.indexOf(\"f\") >= 0) {\r\n            let opdparts = opd.split(\"f\");\r\n            opdr = {};\r\n            if (opdparts[0] == \"\" || opdparts[1] == \"\") {\r\n                opdr.oprdN = 0;\r\n                opdr.oprdD = 1;\r\n            }\r\n            else {\r\n                opdr.oprdN = parseFloat(opdparts[0]);\r\n                opdr.oprdD = parseFloat(opdparts[1]);\r\n            }\r\n        }\r\n        else { //plain number\r\n            opdr = {};\r\n            opdr.oprdN = parseFloat(opd);\r\n            opdr.oprdD = 1;\r\n        }\r\n\r\n        // console.log(\"opdr:\" + JSON.stringify(opdr));\r\n        return opdr;\r\n    }\r\n\r\n\r\n    function simplifyFrac(opd) {\r\n        if (opd.oprdN == 0) return \"0f1\";\r\n        let isneg = 1;\r\n        if (opd.oprdN < 0 && opd.oprdD < 0) {\r\n            opd.oprdN = -1 * opd.oprdN;\r\n            opd.oprdD = -1 * opd.oprdD;\r\n        }\r\n        else {\r\n            if (opd.oprdN < 0) {\r\n                isneg = -1;\r\n                opd.oprdN = isneg * opd.oprdN;\r\n            }\r\n            if (opd.oprdD < 0) {\r\n                isneg = -1;\r\n                opd.oprdD = isneg * opd.oprdD;\r\n            }\r\n        }\r\n        let args = [];\r\n        args.push(opd.oprdN);\r\n        args.push(opd.oprdD);\r\n        let gcd = ctx.Functions[\"gcd\"].apply(null, args)\r\n        // console.log(\"gcd:\" + gcd);\r\n        return parseFloat(opd.oprdN / gcd) * isneg + \"f\" + parseFloat(opd.oprdD / gcd);\r\n    }\r\n\r\n    function simplifyFracParts(opd) {\r\n        if (opd.oprdN == 0) return \"0f1\";\r\n        let isneg = 1;\r\n        if (opd.oprdN < 0 && opd.oprdD < 0) {\r\n            opd.oprdN = -1 * opd.oprdN;\r\n            opd.oprdD = -1 * opd.oprdD;\r\n        }\r\n        else {\r\n            if (opd.oprdN < 0) {\r\n                isneg = -1;\r\n                opd.oprdN = isneg * opd.oprdN;\r\n            }\r\n            if (opd.oprdD < 0) {\r\n                isneg = -1;\r\n                opd.oprdD = isneg * opd.oprdD;\r\n            }\r\n        }\r\n        let result = {};\r\n        let args = [];\r\n        args.push(opd.oprdN);\r\n        args.push(opd.oprdD);\r\n        let gcd = ctx.Functions[\"gcd\"].apply(null, args)\r\n        // console.log(\"gcd:\" + gcd);\r\n        result.oprdN = isneg * parseFloat(opd.oprdN / gcd);\r\n        result.oprdD = parseFloat(opd.oprdD / gcd);\r\n        return result;\r\n    }\r\n\r\n\r\n    function performFracOp(opt, opd, opn) {\r\n        switch (opn) {\r\n            case '+':\r\n                opt = getFrac(opt);\r\n                opd = getFrac(opd);\r\n                opt.oprdN = opt.oprdN * opd.oprdD + opt.oprdD * opd.oprdN;\r\n                opt.oprdD = opt.oprdD * opd.oprdD;\r\n                return simplifyFrac(opt);\r\n            case '-':\r\n                opt = getFrac(opt);\r\n                opd = getFrac(opd);\r\n                opt.oprdN = opt.oprdN * opd.oprdD - opt.oprdD * opd.oprdN;\r\n                opt.oprdD = opt.oprdD * opd.oprdD;\r\n                return simplifyFrac(opt);\r\n            case '*':\r\n                opt = getFrac(opt);\r\n                opd = getFrac(opd);\r\n                ////\r\n                let dmoptN = util.countDecimals(opt.oprdN);\r\n                let dmoptD = util.countDecimals(opt.oprdD);\r\n                let dmfactopt = 0;\r\n\r\n                if (dmoptN > 0 || dmoptD > 0) {\r\n                    if (dmoptN > dmoptD) {\r\n                        dmfactopt = Math.pow(10, dmoptN);\r\n                    }\r\n                    else {\r\n                        dmfactopt = Math.pow(10, dmoptD);\r\n                    }\r\n                }\r\n\r\n                if (dmfactopt != 0) {\r\n                    opt.oprdN = opt.oprdN * dmfactopt;\r\n                    opt.oprdD = opt.oprdD * dmfactopt;\r\n                }\r\n\r\n\r\n                let dmopdN = util.countDecimals(opd.oprdN);\r\n                let dmopdD = util.countDecimals(opd.oprdD);\r\n                let dmfactopd = 0;\r\n\r\n                if (dmopdN > 0 || dmopdD > 0) {\r\n                    if (dmopdN > dmopdD) {\r\n                        dmfactopd = Math.pow(10, dmopdN);\r\n                    }\r\n                    else {\r\n                        dmfactopd = Math.pow(10, dmopdD);\r\n                    }\r\n                }\r\n\r\n                if (dmfactopd != 0) {\r\n                    opd.oprdN = opd.oprdN * dmfactopd;\r\n                    opd.oprdD = opd.oprdD * dmfactopd;\r\n                }\r\n                ///\r\n                opt = simplifyFracParts(opt);\r\n                opd = simplifyFracParts(opd);\r\n\r\n                opt.oprdN = opt.oprdN * opd.oprdN;\r\n                opt.oprdD = opt.oprdD * opd.oprdD;\r\n\r\n                return simplifyFrac(opt);\r\n            case '/':\r\n                opt = getFrac(opt);\r\n                opd = getFrac(opd);\r\n                opt.oprdN = opt.oprdN * opd.oprdD;\r\n                opt.oprdD = opt.oprdD * opd.oprdN;\r\n                return simplifyFrac(opt);\r\n        }\r\n    }\r\n\r\n    return {\r\n        performFracOp: performFracOp\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\n///////////\r\nTapDigit.Lexer = function () {\r\n    let expression = '',\r\n        length = 0,\r\n        index = 0,\r\n        marker = 0,\r\n        T = TapDigit.Token;\r\n\r\n    function peekNextChar() {\r\n        let idx = index;\r\n        return ((idx < length) ? expression.charAt(idx) : '\\x00');\r\n    }\r\n\r\n    function getNextChar() {\r\n        let ch = '\\x00',\r\n            idx = index;\r\n        if (idx < length) {\r\n            ch = expression.charAt(idx);\r\n            index += 1;\r\n        }\r\n        return ch;\r\n    }\r\n\r\n    function isWhiteSpace(ch) {\r\n        return (ch === '\\u0009') || (ch === ' ') || (ch === '\\u00A0');\r\n    }\r\n\r\n    function isLetter(ch) {\r\n        return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\r\n    }\r\n\r\n    function isDecimalDigit(ch) {\r\n        return (ch >= '0') && (ch <= '9');\r\n    }\r\n\r\n    function isFractionDigit(ch) {\r\n        return (ch === 'f');\r\n    }\r\n\r\n    function createToken(type, value) {\r\n        return {\r\n            type: type,\r\n            value: value,\r\n            start: marker,\r\n            end: index - 1\r\n        };\r\n    }\r\n\r\n    function skipSpaces() {\r\n        let ch;\r\n\r\n        while (index < length) {\r\n            ch = peekNextChar();\r\n            if (!isWhiteSpace(ch)) {\r\n                break;\r\n            }\r\n            getNextChar();\r\n        }\r\n    }\r\n\r\n    function scanOperator() {\r\n        let ch = peekNextChar();\r\n        if ('>+-*/()^%=;,:'.indexOf(ch) >= 0) {\r\n            return createToken(T.Operator, getNextChar());\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function isIdentifierStart(ch) {\r\n        return (ch === '_') || isLetter(ch);\r\n    }\r\n\r\n    function isIdentifierPart(ch) {\r\n        return isIdentifierStart(ch) || isDecimalDigit(ch);\r\n    }\r\n\r\n    function scanIdentifier() {\r\n        let ch, id;\r\n\r\n        ch = peekNextChar();\r\n        if (!isIdentifierStart(ch)) {\r\n            return undefined;\r\n        }\r\n\r\n        id = getNextChar();\r\n        while (true) {\r\n            ch = peekNextChar();\r\n            if (!isIdentifierPart(ch)) {\r\n                break;\r\n            }\r\n            id += getNextChar();\r\n        }\r\n\r\n        return createToken(T.Identifier, id);\r\n    }\r\n\r\n    function isStringStartOrEnd(ch) {\r\n        return (ch === '\\'');\r\n    }\r\n\r\n    function isOperator(ch) {\r\n        return ('>+-*/()^%=;,'.indexOf(ch) >= 0)\r\n    }\r\n\r\n    function isStringPart(ch) {\r\n        return isIdentifierStart(ch) || isDecimalDigit(ch) || isOperator(ch) || isWhiteSpace(ch);\r\n    }\r\n\r\n    function scanString() {\r\n        var ch, id;\r\n\r\n        ch = peekNextChar();\r\n        if (!isStringStartOrEnd(ch)) {\r\n            return undefined;\r\n        }\r\n\r\n        id = getNextChar();\r\n        while (true) {\r\n            ch = peekNextChar();\r\n\r\n            if (isStringStartOrEnd(ch)) {\r\n                id += getNextChar();\r\n                break;\r\n            }\r\n\r\n            if (!isStringPart(ch)) {\r\n                break;\r\n            }\r\n            id += getNextChar();\r\n        }\r\n\r\n        return createToken(T.String, id);\r\n    }\r\n\r\n    function scanNumber() {\r\n        var ch, number;\r\n\r\n        ch = peekNextChar();\r\n        if (!isDecimalDigit(ch) && (ch !== '.')) {\r\n            return undefined;\r\n        }\r\n\r\n        number = '';\r\n        if (ch !== '.') {\r\n            number = getNextChar();\r\n            while (true) {\r\n                ch = peekNextChar();\r\n                if (!isDecimalDigit(ch)) {\r\n                    break;\r\n                }\r\n                number += getNextChar();\r\n            }\r\n        }\r\n\r\n        if (ch === '.') {\r\n            number += getNextChar();\r\n            while (true) {\r\n                ch = peekNextChar();\r\n                if (!isDecimalDigit(ch)) {\r\n                    break;\r\n                }\r\n                number += getNextChar();\r\n            }\r\n        }\r\n\r\n        if (ch === 'e' || ch === 'E') {\r\n            number += getNextChar();\r\n            ch = peekNextChar();\r\n            if (ch === '+' || ch === '-' || isDecimalDigit(ch)) {\r\n                number += getNextChar();\r\n                while (true) {\r\n                    ch = peekNextChar();\r\n                    if (!isDecimalDigit(ch)) {\r\n                        break;\r\n                    }\r\n                    number += getNextChar();\r\n                }\r\n            } else {\r\n                ch = 'character ' + ch;\r\n                if (index >= length) {\r\n                    ch = '<end>';\r\n                }\r\n                throw new SyntaxError('Unexpected ' + ch + ' after the exponent sign');\r\n            }\r\n        }\r\n\r\n        if (ch === 'f' || ch === 'F') {\r\n            number += getNextChar();\r\n            ch = peekNextChar();\r\n            if (ch === '+' || ch === '-' || isDecimalDigit(ch) || ch == '.') {\r\n                number += getNextChar();\r\n                while (true) {\r\n                    ch = peekNextChar();\r\n                    if (!(isDecimalDigit(ch) || ch == '.')) {\r\n                        break;\r\n                    }\r\n                    number += getNextChar();\r\n                }\r\n            } else {\r\n                ch = 'character ' + ch;\r\n                if (index >= length) {\r\n                    ch = '<end>';\r\n                }\r\n                throw new SyntaxError('Unexpected ' + ch + ' after the exponent sign');\r\n            }\r\n        }\r\n\r\n        if (ch === 'm' || ch === 'M') {\r\n            number += getNextChar();\r\n            ch = peekNextChar();\r\n            if (ch === '+' || ch === '-' || isDecimalDigit(ch) || ch == '.') {\r\n                number += getNextChar();\r\n                while (true) {\r\n                    ch = peekNextChar();\r\n                    if (!(isDecimalDigit(ch) || ch == '.' || isFractionDigit(ch))) {\r\n                        break;\r\n                    }\r\n                    number += getNextChar();\r\n                }\r\n                if (!(number.indexOf(\"f\") > 0)) {\r\n                    throw new SyntaxError('Mixed fraction has no fraction digit');\r\n                }\r\n            } else {\r\n                ch = 'character ' + ch;\r\n                if (index >= length) {\r\n                    ch = '<end>';\r\n                }\r\n                throw new SyntaxError('Unexpected ' + ch + ' after the exponent sign');\r\n            }\r\n        }\r\n\r\n        if (number === '.') {\r\n            throw new SyntaxError('Expecting decimal digits after the dot sign');\r\n        }\r\n\r\n        return createToken(T.Number, number);\r\n    }\r\n\r\n    function reset(str) {\r\n        expression = str;\r\n        length = str.length;\r\n        index = 0;\r\n    }\r\n\r\n    function next() {\r\n        let token;\r\n\r\n        skipSpaces();\r\n        if (index >= length) {\r\n            return undefined;\r\n        }\r\n\r\n        marker = index;\r\n\r\n        token = scanString();\r\n        if (typeof token !== 'undefined') {\r\n            return token;\r\n        }\r\n\r\n        token = scanNumber();\r\n        if (typeof token !== 'undefined') {\r\n            return token;\r\n        }\r\n\r\n        token = scanOperator();\r\n        if (typeof token !== 'undefined') {\r\n            return token;\r\n        }\r\n\r\n        token = scanIdentifier();\r\n        if (typeof token !== 'undefined') {\r\n            return token;\r\n        }\r\n\r\n\r\n        throw new SyntaxError('Unknown token from character ' + peekNextChar());\r\n    }\r\n\r\n    function peek() {\r\n        let token, idx;\r\n\r\n        idx = index;\r\n        try {\r\n            token = next();\r\n            if (token) {\r\n                delete token.start;\r\n                delete token.end;\r\n            }\r\n        } catch (e) {\r\n            token = undefined;\r\n        }\r\n        index = idx;\r\n\r\n        return token;\r\n    }\r\n\r\n    return {\r\n        reset: reset,\r\n        next: next,\r\n        peek: peek\r\n    };\r\n};\r\n\r\n/////////////Context ///////////\r\nTapDigit.Context = function () {\r\n    let Constants, Functions;\r\n\r\n    Constants = {\r\n        pi: 3.1415926535897932384,\r\n        phi: 1.6180339887498948482\r\n    };\r\n\r\n    Functions = {\r\n        abs: Math.abs,\r\n        acos: Math.acos,\r\n        asin: Math.asin,\r\n        atan: Math.atan,\r\n        ceil: Math.ceil,\r\n        cos: Math.cos,\r\n        exp: Math.exp,\r\n        floor: Math.floor,\r\n        //   ln: Math.ln,\r\n        random: Math.random,\r\n        sin: Math.sin,\r\n        sqrt: Math.sqrt,\r\n        tan: Math.tan,\r\n        pow: Math.pow,\r\n        step1: step1,\r\n        step2: step2,\r\n        step3: step3,\r\n        step4: step4,\r\n        step5: step5,\r\n        step6: step6,\r\n        step7: step7,\r\n        step8: step8,\r\n        step9: step9,\r\n        step10: step10,\r\n        step11: step11,\r\n        step12: step12,\r\n        cond: cond,\r\n        shs1: shs,\r\n        shs2: shs,\r\n        shs3: shs,\r\n        shs4: shs,\r\n        shs5: shs,\r\n        shs6: shs,\r\n        sortlh: sortlh,\r\n        sorthl: sorthl,\r\n        gcd: gcd,\r\n        isprime: isprime,\r\n        issorthl: issorthl,\r\n        issortlh: issortlh,\r\n        high: high,\r\n        low: low,\r\n        lcm: lcm,\r\n        time12: time12,\r\n        whole: whole,\r\n        round10: round10,\r\n        floor10: floor10,\r\n        ceil10: ceil10,\r\n        round: Math.round,\r\n        round100: round100,\r\n        seq: seq,\r\n        eqn: eqn,\r\n        oper: oper,\r\n        ineq: ineq,\r\n        nconv: nconv,\r\n        neq: neq,\r\n        repeatvalnop:repeatvalnop,\r\n        repeatvaln:repeatvaln\r\n    };\r\n\r\n    function whole() {\r\n        return Number(String(arguments[0]).split(\".\")[0]);\r\n    }\r\n\r\n        function repeatvalnop(val,n,op) {\r\n        let rslt = \"\";\r\n        for(let i=0;i<n-1; i++) {\r\n            rslt = rslt + val + \" \" + op + \" \";\r\n        }\r\n        rslt = rslt + val;\r\n        return rslt;\r\n    }\r\n\r\n    function repeatvaln(val,n) {\r\n         let rslt = \"\";\r\n        for(let i=0;i<n; i++) {\r\n            rslt = rslt + val + \" \";\r\n        }\r\n        return rslt.trim();\r\n    }\r\n\r\n    function nconv() {\r\n        let opts = arguments[1].toString().split('');\r\n        let num = arguments[0];\r\n        let rslt = \"\";\r\n        let ntyp = \"\";\r\n        if (arguments[2]) {\r\n            ntyp = arguments[2];\r\n        }\r\n        if (num.toString().indexOf('%') >= 0) {\r\n            num = num.split('%')[0] + 'f' + 100;\r\n        }\r\n        else if (num.toString().indexOf(\".\") >= 0) {\r\n            num = num + 'f' + 1;\r\n        }\r\n        else if (num.toString().indexOf(\"m\") >= 0) {\r\n            let fracobj = new TapDigit.Fractions(new TapDigit.Context());\r\n            num = fracobj.performFracOp(num.toString(), \"1f1\", \"*\");\r\n        }\r\n        else {\r\n            num = num + 'f' + 1;\r\n        }\r\n\r\n        for (let i = 0; i < opts.length; i++) {\r\n            switch (opts[i]) {\r\n                case 'p':\r\n                    {\r\n                        let fracobj = new TapDigit.Fractions(new TapDigit.Context());\r\n                        let num2 = fracobj.performFracOp(num.toString(), \"1f100\", \"*\");\r\n                        let neweqn = num2.replace(/(f)/g, function replacer(match, $1) {\r\n                            return \"/\";\r\n                        });\r\n                        rslt = rslt + eval(neweqn) + \" \";\r\n\r\n                        break;\r\n                    }\r\n                case 'd':\r\n                    {\r\n                        //convert to decimal\r\n                        let neweqn = num.replace(/(f)/g, function replacer(match, $1) {\r\n                            return \"/\";\r\n                        });\r\n                        rslt = rslt + eval(neweqn) + \" \";\r\n                        break;\r\n                    }\r\n                case 'f':\r\n                    rslt = rslt + num.toString() + \" \" //no changes\r\n                    break;\r\n                case 'm':\r\n                    let rnum = Number(num.split(\"f\")[1]);\r\n                    let lnum = Number(num.split(\"f\")[0]);\r\n                    if (rnum == lnum) {\r\n                        rslt = rslt + \"1\" + \" \" //no changes\r\n                    }\r\n                    else if (lnum < rnum) {\r\n                        rslt = rslt + num.toString() + \" \" //no changes\r\n                    }\r\n                    else {\r\n                        let rem = whole(lnum / rnum);\r\n                        let oprdN = lnum - rnum * rem;\r\n                        rslt = rslt + rem + \"m\" + oprdN + \"f\" + rnum + \" \";\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return rslt.trim();\r\n    }\r\n\r\n    function uconv() {\r\n\r\n    }\r\n\r\n\r\n    function neq() {\r\n        //convert everything to proper functions and compare\r\n        let nums = arguments;\r\n        let fracobj = new TapDigit.Fractions(new TapDigit.Context());\r\n        for (let i = 0; i < nums.length; i++) {\r\n            if (nums[i].toString().indexOf(\"%\") >= 0) {\r\n                nums[i] = nums[i].split('%')[0] + 'f' + 100;\r\n            }\r\n            else if (nums[i].toString().indexOf(\".\") >= 0) {\r\n                nums[i] = fracobj.performFracOp(nums[i].toString(), \"1f1\", \"*\");\r\n            }\r\n            else if (nums[i].toString().indexOf(\"m\") >= 0) {\r\n                nums[i] = fracobj.performFracOp(nums[i].toString(), \"1f1\", \"*\");\r\n            }\r\n            else if (nums[i].toString().indexOf(\"f\") >= 0) {\r\n\r\n            }\r\n            else {\r\n                nums[i] = nums[i] + 'f' + 1;\r\n            }\r\n        }\r\n        let iseq = true;\r\n        let cmpnum = nums[0];\r\n        for (let i = 1; i < nums.length; i++) {\r\n            if (cmpnum != nums[i]) {\r\n                iseq = false; break;\r\n            }\r\n            cmpnum = nums[i];\r\n        }\r\n        return (iseq == true) ? 'true' : 'false';\r\n    }\r\n\r\n\r\n\r\n    function oper(op) {\r\n        if (op == undefined) {\r\n            op = util.getRandomOperator();\r\n        }\r\n        else {\r\n            if (op.length > 1) op = util.getRandomOperator(op);\r\n        }\r\n        return op;\r\n    }\r\n\r\n    function eqn(left, right, op) {\r\n        if (right == undefined) {\r\n            return left;\r\n        }\r\n        if (op == undefined) {\r\n            op = util.getRandomOperator();\r\n        }\r\n        else {\r\n            if (op.length > 1) op = util.getRandomOperator(op);\r\n        }\r\n        let fracobj = new TapDigit.Fractions(new TapDigit.Context());\r\n        if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0 ||\r\n            left.toString().indexOf(\"m\") >= 0 || right.toString().indexOf(\"m\") >= 0) {\r\n            return fracobj.performFracOp(left.toString(), right.toString(), op)\r\n        }\r\n        else {\r\n            if (op == \"+\") {\r\n                return Number(left) + Number(right);\r\n            }\r\n            else if (op == \"*\") {\r\n                return Number(left) * Number(right);\r\n            }\r\n            else if (op == \"-\") {\r\n                return Number(left) - Number(right);\r\n            }\r\n            else if (op == \"/\") {\r\n                return Number(left) / Number(right);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getfnum(left, right) {\r\n        let rmult, lmult;\r\n        rmult = 1; lmult = 1;\r\n        let lnum, rnum;\r\n        if (left.toString().indexOf(\"f\") >= 0) {\r\n            lmult = Number(left.split(\"f\")[1]);\r\n            lnum = Number(left.split(\"f\")[0]);\r\n        }\r\n        else {\r\n            lnum = Number(left);\r\n        }\r\n        if (right.toString().indexOf(\"f\") >= 0) {\r\n            rmult = Number(right.split(\"f\")[1]);\r\n            rnum = Number(right.split(\"f\")[0]);\r\n        }\r\n        else {\r\n            rnum = Number(right);\r\n        }\r\n        lnum = lnum * rmult;\r\n        rnum = rnum * lmult;\r\n        return [lnum, rnum];\r\n    }\r\n\r\n    function ineq(left, right) {\r\n        let nums;\r\n        if (left.toString().indexOf(\"f\") >= 0 || right.toString().indexOf(\"f\") >= 0) {\r\n            nums = getfnum(left, right);\r\n            left = nums[0];\r\n            right = nums[1];\r\n        }\r\n        if (left > right) return \">\"\r\n        else if (left < right) return \"<\"\r\n        else return \"=\"\r\n    }\r\n\r\n\r\n    function seq(pos, pose, eqn, sep) {\r\n        let step = 1;\r\n        pos = Number(pos); pose = Number(pose);\r\n        if (Number(pose) < Number(pos)) {\r\n            step = -1;\r\n        }\r\n        if (sep == undefined) sep = \"__\";\r\n        let evalnum = pos;\r\n        let rslt = \"\";\r\n        while (evalnum != pose + step) {\r\n            let neweqn = eqn.replace(/(n)/g, function replacer(match, $1) {\r\n                return evalnum + \"\";\r\n            });\r\n            rslt = rslt + eval(neweqn) + sep;\r\n            evalnum = evalnum + step;\r\n        }\r\n        let regStr = \"^\" + sep + \"+|\" + sep + \"+$\";\r\n        let regExp = new RegExp(regStr, \"g\");\r\n        return rslt.replace(regExp, '');\r\n    }\r\n\r\n    function round100(val) {\r\n        let whnum = String(round10(Number(val), 0)).split(\".\")[0];\r\n        if (Number(whnum) > 0) {\r\n            return round10(round10(val, 0), whnum.length - 1);\r\n        }\r\n        else {\r\n            if (String(val).split(\".\").length > 1) {\r\n                let decnum = String(val).split(\".\")[1].replace(/0+$/, '');\r\n                let roundlen = 1;\r\n                for (let i = 0; i < decnum.length; i++) {\r\n                    if (decnum[i] == \"0\") {\r\n                        roundlen = roundlen + 1;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                let mul = 1;\r\n                for (let j = 0; j < decnum.length; j++) {\r\n                    mul = mul * 10;\r\n                }\r\n                return round10(decnum / mul, -1 * roundlen);\r\n            }\r\n            else {\r\n                return val;\r\n            }\r\n        }\r\n    }\r\n\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n\r\n    function decimalAdjust(type, value, exp) {\r\n        // If the exp is undefined or zero...\r\n        if (typeof exp === 'undefined' || +exp === 0) {\r\n            return Math[type](value);\r\n        }\r\n        value = +value;\r\n        exp = +exp;\r\n        // If the value is not a number or the exp is not an integer...\r\n        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\r\n            return NaN;\r\n        }\r\n        // If the value is negative...\r\n        if (value < 0) {\r\n            return -decimalAdjust(type, -value, exp);\r\n        }\r\n        // Shift\r\n        value = value.toString().split('e');\r\n        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\r\n        // Shift back\r\n        value = value.toString().split('e');\r\n        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\r\n    }\r\n\r\n\r\n    function round10(value, exp) {\r\n        return decimalAdjust('round', value, exp);\r\n    };\r\n\r\n\r\n    function floor10(value, exp) {\r\n        return decimalAdjust('floor', value, exp);\r\n    };\r\n\r\n    // Decimal ceil\r\n\r\n    function ceil10(value, exp) {\r\n        return decimalAdjust('ceil', value, exp);\r\n    };\r\n\r\n\r\n    function time12() {\r\n        let h = arguments[0];\r\n        let m = arguments[1];\r\n        let hh = arguments[2];\r\n        let strap = arguments[3] ? arguments[3].toUpperCase() : \"AM\";\r\n\r\n        let mh = Math.floor(m / 60);\r\n        let mm = m - mh * 60;\r\n\r\n        let t = mh + h;\r\n\r\n        let result = \"\";\r\n        if (t < 12) {\r\n            result = pad(t, 2, '0') + \":\" + pad(mm, 2, '0') + ' ' + strap;\r\n        }\r\n        else if (t == 12) {\r\n            if (hh < 12) { result = pad(t, 2, '0') + \":\" + pad(mm, 2, '0') + \" \" + (strap == \"AM\" ? \"PM\" : \"AM\") }                                              //am to pm  }\r\n            if (hh == 12) { result = pad(t, 2, '0') + \":\" + pad(mm, 2, '0') + ' ' + strap; }\r\n        }\r\n        else {\r\n            t = t % 12;\r\n            if (hh < 12) { result = pad(t, 2, '0') + \":\" + pad(mm, 2, '0') + \" \" + (strap == \"AM\" ? \"PM\" : \"AM\") }                                              //am to pm  }\r\n            if (hh == 12) { result = pad(t, 2, '0') + \":\" + pad(mm, 2, '0') + ' ' + strap; }\r\n            //  result = pad(t,2,'0') + \":\" + pad(mm,2,'0') + \" \" + (strap==\"AM\"?\"PM\":\"AM\");\r\n            //possible bug RARE case more than 24 than show AM to AM\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function pad(n, width, z) { n = '' + n; while (n.length < width) n = z + n; return n; }\r\n\r\n\r\n    function high() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparehlany);\r\n        return sortlist[0];\r\n    }\r\n\r\n    function low() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparelhany);\r\n        return sortlist[0];\r\n    }\r\n\r\n    function issortlh() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparelhany);\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (!(arguments[i].toString() === sortlist[i].toString())) {\r\n                return 'false'  //false\r\n            }\r\n        }\r\n        return 'true'  //true\r\n    }\r\n\r\n    function sortlh() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparelhany);\r\n        return sortlist;\r\n    }\r\n\r\n    function issorthl() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparehlany);\r\n\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (!(arguments[i].toString() === sortlist[i].toString())) {\r\n                return 'false'  //false\r\n            }\r\n        }\r\n        return 'true'  //true\r\n    }\r\n\r\n    function sorthl() {\r\n        let sortlist = [];\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            sortlist.push(arguments[i]);\r\n        }\r\n        sortlist.sort(comparehlany);\r\n        return sortlist;\r\n    }\r\n\r\n    function comparehlany(f1, f2) {\r\n        if (isNaN(f1) || isNaN(f2)) {\r\n            if (!isNaN(f1)) {\r\n                //convert to f unumber]\r\n                f1 = \"\" + f1 + \"f1\";\r\n            }\r\n            if (!isNaN(f2)) {\r\n                //convert to f unumber\r\n                f2 = \"\" + f2 + \"f1\";\r\n            }\r\n            if (f1.split(\"m\")[0] !== f1) {\r\n                //convert to fraction\r\n                let p2 = f1.split(\"f\")[1];\r\n                let p1 = parseFloat(p2) * parseFloat(f1.split(\"m\")[0]) + parseFloat(f1.split(\"f\")[0]);\r\n                f1 = p1 + \"f\" + p2;\r\n            }\r\n            if (f1.split(\"f\")[1] === f2.split(\"f\")[1]) {\r\n                return parseFloat(f2.split(\"f\")[0]) - parseFloat(f1.split(\"f\")[0])\r\n            }\r\n            else {\r\n                return parseFloat(f2.split(\"f\")[0]) * parseFloat(f1.split(\"f\")[1]) - parseFloat(f1.split(\"f\")[0]) * parseFloat(f2.split(\"f\")[1])\r\n            }\r\n        }\r\n        else {\r\n            return f2 - f1;\r\n        }\r\n    }\r\n\r\n    function comparelhany(f1, f2) {\r\n        if (isNaN(f1) || isNaN(f2)) {\r\n            if (!isNaN(f1)) {\r\n                //convert to f unumber]\r\n                f1 = \"\" + f1 + \"f1\";\r\n            }\r\n            if (!isNaN(f2)) {\r\n                //convert to f unumber\r\n                f2 = \"\" + f2 + \"f1\";\r\n            }\r\n            if (f1.split(\"m\")[0] !== f1) {\r\n                //convert to fraction\r\n                let p2 = f1.split(\"f\")[1];\r\n                let p1 = parseFloat(p2) * parseFloat(f1.split(\"m\")[0]) + parseFloat(f1.split(\"f\")[0]);\r\n                f1 = p1 + \"f\" + p2;\r\n            }\r\n            if (f1.split(\"f\")[1] === f2.split(\"f\")[1]) {\r\n                return parseFloat(f1.split(\"f\")[0]) - parseFloat(f2.split(\"f\")[0])\r\n            }\r\n            else {\r\n                return parseFloat(f1.split(\"f\")[0]) * parseFloat(f2.split(\"f\")[1]) - parseFloat(f2.split(\"f\")[0]) * parseFloat(f1.split(\"f\")[1])\r\n            }\r\n        }\r\n        else {\r\n            return f1 - f2;\r\n        }\r\n    }\r\n\r\n    function gcd() {\r\n        let gcdlist = [];\r\n        for (let i = 0; i < arguments.length; i++)\r\n            gcdlist.push(arguments[i]);\r\n        // var points = [40, 100, 1, 5, 25, 10];\r\n        //sort by lowest to highest\r\n        gcdlist.sort(function (a, b) { return a - b });\r\n        let cnt = gcdlist.length;\r\n        let i = 1;\r\n        let numone = gcdlist[0];\r\n        let numtwo;\r\n        let result;\r\n        while (i < cnt) {\r\n            numtwo = gcdlist[i];\r\n            while (1) {\r\n                result = numtwo % numone;\r\n                if (result == 0) break;\r\n                numtwo = numone;\r\n                numone = result;\r\n            }\r\n            i = i + 1;\r\n        }\r\n        return numone;\r\n    }\r\n\r\n    function lcm() {\r\n        let multval = 1;\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            multval = multval * arguments[i];\r\n        }\r\n        let absval = Math.abs(multval);\r\n        //////////////////\r\n        let gcdlist = [];\r\n        for (let i = 0; i < arguments.length; i++)\r\n            gcdlist.push(arguments[i]);\r\n        // var points = [40, 100, 1, 5, 25, 10];\r\n        //sort by lowest to highest\r\n        gcdlist.sort(function (a, b) { return a - b });\r\n        let cnt = gcdlist.length;\r\n        let i = 1;\r\n        let numone = gcdlist[0];\r\n        let numtwo;\r\n        let result;\r\n        while (i < cnt) {\r\n            numtwo = gcdlist[i];\r\n            while (1) {\r\n                result = numtwo % numone;\r\n                if (result == 0) break;\r\n                numtwo = numone;\r\n                numone = result;\r\n            }\r\n            i = i + 1;\r\n        }\r\n        // return numone;\r\n        ///////////////////////\r\n\r\n\r\n        return absval / numone;\r\n    }\r\n\r\n    function isprime(value) {\r\n        value = Number(value);\r\n        for (var i = 2; i < value; i++) {\r\n            if (value % i === 0) {\r\n                //  return 0;   //false\r\n                return 'false'  //false\r\n            }\r\n        }\r\n        // return 1; //true\r\n        return 'true' //true\r\n    }\r\n\r\n    function step1(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step2(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step3(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function shs(myarg) {\r\n        return 0;\r\n    }\r\n\r\n    function step4(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step5(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step6(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step7(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step8(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step9(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step10(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step11(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function step12(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    function cond(myarg) {\r\n        return myarg;\r\n    }\r\n\r\n    return {\r\n        Constants: Constants,\r\n        Functions: Functions,\r\n        Variables: {}\r\n    };\r\n};\r\n\r\nTapUtil.Util = function () {\r\n    let range = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    var primes = {};\r\n\r\n    let createRange = function (datarules) {\r\n        //shuffle\r\n    };\r\n\r\n    let setPrimes = function (max) {\r\n        if (primes.hasOwnProperty(\"2\")) {\r\n            return;\r\n        }\r\n        for (var i = 2; i < max; i++) {\r\n            primes[i] = true;\r\n        }\r\n        var limit = Math.sqrt(max);\r\n        for (var i = 2; i < limit; i++) {\r\n            if (primes[i] === true) {\r\n                for (var j = i * i; j < max; j += i) {\r\n                    primes[j] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    let pad = function (n, width, z) { n = '' + n; while (n.length < width) n = z + n; return n; }\r\n\r\n    //trim\r\n    let trm = function (val, sep) {\r\n        let regStr = \"^\" + sep + \"+|\" + sep + \"+$\";\r\n        let regExp = new RegExp(regStr, \"g\");\r\n        return val.replace(regExp, '');\r\n    }\r\n\r\n    let rndvar = function (rslt, diff, min, max) {\r\n        let rndval;\r\n        if (rslt - diff >= min && rslt + diff <= max) {\r\n            rndval = getRandom(rslt - diff, rslt + diff)\r\n        }\r\n        else if (rslt - diff < min) {\r\n            let zo = getRandom(0, 1);\r\n            rndval = zo == 0 ? getRandom(rslt - diff + 12, 12) : getRandom(min, rslt + diff);\r\n        }\r\n        else if (rslt + diff > max) {\r\n            let zo = getRandom(0, 1);\r\n            rndval = zo == 0 ? getRandom(rslt - diff, max) : getRandom(min, (rslt + diff) % max);\r\n        }\r\n        return rndval;\r\n    }\r\n\r\n    let getRandomChoices = function (result, datarule) {\r\n        console.log(\"processing random choices for...\" + JSON.stringify(result));\r\n        if (Object.prototype.toString.call(result) === '[object Array]') {\r\n            let arrresult = new Array();\r\n            let sh = getShuffle([0, 1, 2, 3]);\r\n            for (let k = 0; k < sh.length; k++) {\r\n                if (sh[k] == 0) { arrresult.push(JSON.parse(JSON.stringify(result))); }\r\n                else {\r\n                    let mys = getShuffle(JSON.parse(JSON.stringify(result)));\r\n                    arrresult.push(mys);\r\n                }\r\n            }\r\n            return arrresult;\r\n        }\r\n        //multi answer question\r\n        else if (isNaN(result) && (result.indexOf(\"__\") > 0 || result.indexOf(\" \") > 0 || result.indexOf(\",\") > 0)) {\r\n            return [];\r\n        }\r\n        else if (result == 'true' || result == 'false') {\r\n            return getShuffle([\"true\", \"false\"]);\r\n        }\r\n        else if (isNaN(result) && (\"<>=\".indexOf(result) >= 0)) {\r\n            return getShuffle([\">\", \"<\", \"=\"]);\r\n        }\r\n        else if (result.indexOf(\"m\") > 0 || result.indexOf(\"f\") > 0) {\r\n            //get numbers\r\n            if (result.indexOf(\"m\") > 0) {\r\n                //later\r\n            }\r\n            else if (result.indexOf(\"f\") > 0) {\r\n                let fres = [];\r\n                fres.push(result);\r\n                let n1 = parseFloat(result.split(\"f\")[0]);\r\n                let n2 = parseFloat(result.split(\"f\")[1]);\r\n                //generate n1 and n2\r\n                let cnt = 1;\r\n                while (cnt != 4) {\r\n                    // let nn1 = getRandom(1, n1 + 5)\r\n                    //let nn2 = getRandom(1, n2 + 10)\r\n                    let nn1 = rndvar(n1, 3, 1, n1 + 5); //getRandom(1, 12)\r\n                    let nn2 = rndvar(n2, 3, 1, n1 + 5);\r\n                    let result2 = nn1 + \"f\" + nn2;\r\n                    if (result != result2) {\r\n                        cnt = cnt + 1;\r\n                        fres.push(result2);\r\n                    }\r\n                }\r\n                return getShuffle(fres);\r\n            }\r\n        }\r\n        else if (isNaN(result) && result.indexOf(\":\") > 0) {\r\n            let fres = [];\r\n            fres.push(result);\r\n\r\n            let r1, r2;\r\n            if (result.indexOf(\"AM\") > 0 || result.indexOf(\"PM\") > 0) {\r\n                r2 = result.split(\" \")[1];\r\n                r1 = result.split(\" \")[0];\r\n            }\r\n            else {\r\n                r1 = result;\r\n                r2 = \"\";\r\n            }\r\n            let n1 = parseFloat(r1.split(\":\")[0]);\r\n            let n2 = parseFloat(r1.split(\":\")[1]);\r\n\r\n            //generate n1 and n2\r\n            let cnt = 1;\r\n            while (cnt != 4) {\r\n                let nn1 = rndvar(n1, 3, 1, 12); //getRandom(1, 12)\r\n                let nn2 = rndvar(n2, 5, 1, 59);\r\n                let result2;\r\n                if (r2 != \"\") {\r\n                    let ampm = getShuffle([\"AM\", \"PM\"])[0];\r\n                    result2 = pad(nn1, 2, '0') + \":\" + pad(nn2, 2, '0') + \" \" + ampm;\r\n                }\r\n                else {\r\n                    result2 = pad(nn1, 2, '0') + \":\" + pad(nn2, 2, '0');\r\n                }\r\n\r\n                if (result != result2) {\r\n                    cnt = cnt + 1;\r\n                    fres.push(result2);\r\n                }\r\n            }\r\n            return getShuffle(fres);\r\n        }\r\n        else {\r\n            return getRandomChoiceNumber(result);\r\n        }\r\n    }\r\n\r\n    let getRandomOperator = function (opr) {\r\n        let charr;\r\n        if (opr == undefined) {\r\n            charr = \"+-*/\".split('');\r\n        }\r\n        else {\r\n            charr = opr.split('');\r\n        }\r\n        return getShuffle(charr)[0];\r\n    }\r\n\r\n    let getRandomChoiceNumber = function (result) {\r\n        console.log(\"processing random choice number for...\" + JSON.stringify(result));\r\n        let dcntresult = countDecimals(result);\r\n        let dmfactor = 0;\r\n\r\n        var rslt;\r\n        if (dcntresult > 0) {\r\n            dmfactor = Math.pow(10, dcntresult);\r\n            rslt = Number(result) * dmfactor;\r\n            if (rslt % dmfactor == 0) {\r\n                rslt = Number(result);\r\n                dmfactor = 1;\r\n            }\r\n        }\r\n        else {\r\n            rslt = Number(result);\r\n        }\r\n\r\n        let charr = [0, 0, 0, 0];\r\n        let ch1, ch2, ch3;\r\n\r\n        if (rslt <= 9) {\r\n            ch1 = getRandom(0, 9);\r\n            ch2 = getRandom(1, 9) * 10 + rslt;\r\n            ch3 = getRandom(1, rslt * 9);\r\n        }\r\n        else if (rslt <= 99) {\r\n            ch1 = getRandom(0, 99);\r\n            ch2 = getRandom(1, 9) * 10 + rslt;\r\n            ch3 = getRandom(1, 9) * 10;\r\n            let ch3res = rslt - ch3;\r\n            if (ch3res <= 0) {\r\n                ch3 = ch3 - rslt;\r\n            }\r\n            else {\r\n                ch3 = ch3res;\r\n            }\r\n        }\r\n        else {\r\n            let dsize = rslt.toString().length;\r\n            let d1 = rslt.toString()[0];\r\n            let minN = 1;\r\n            while (dsize--) {\r\n                minN = minN * 10;\r\n            }\r\n            // 1000 - 9999\r\n            //2000 - 2999 //keep the first digit same\r\n            ch1 = getRandom(minN / 10 * d1, minN / 10 * d1 + (minN - 1) / 10);\r\n            let ch2ran = getRandom(1, 9) * 10;\r\n            let ch2res = rslt - ch2ran;\r\n            if (ch2res <= 0) {\r\n                ch2 = ch2ran - rslt;\r\n            }\r\n            else {\r\n                ch2 = ch2res;\r\n            }\r\n            let ch3ran = getRandom(10, 99) * 10;\r\n            let ch3res = rslt - ch3ran;\r\n            if (ch3res <= 0) {\r\n                ch3 = ch3ran - rslt;\r\n            }\r\n            else {\r\n                ch3 = ch3res;\r\n            }\r\n        }\r\n\r\n\r\n        //clean the numbers//amke sure none of them are same as result\r\n        if (ch1 == rslt)\r\n            ch1 = rslt + getRandom(1, 99);\r\n        if (ch2 == rslt)\r\n            ch2 = rslt + getRandom(1, 99);\r\n        if (ch3 == rslt)\r\n            ch3 = rslt + getRandom(1, 99);\r\n        //TODO make sure none are same\r\n\r\n        charr[0] = ch1;\r\n        charr[1] = ch2;\r\n        charr[2] = rslt;\r\n        charr[3] = ch3;\r\n\r\n        if (dmfactor == 1) {\r\n            for (let i = 0; i < 4; i++) {\r\n                charr[i] = charr[i].toFixed(2);\r\n            }\r\n        }\r\n        else if (dmfactor != 0) {\r\n            for (let i = 0; i < 4; i++) {\r\n                charr[i] = charr[i] / dmfactor;\r\n            }\r\n        }\r\n\r\n        //if decimal number then round and show 2 digits after decimal\r\n        for (let i = 0; i < 4; i++) {\r\n            if (charr[i] % 1 !== 0) {\r\n                //charr[i] = parseFloat(Math.round(charr[i] * 100) / 100).toFixed(2);\r\n                let dcnt = String(charr[i]).split(\".\")[1].length;\r\n                charr[i] = \"\" + Number(Math.round(charr[i] + 'e' + dcnt) + 'e-' + dcnt).toFixed(2)\r\n\r\n                // charr[i] = \"\" + Number(Math.round(charr[i] + 'e' + 3) + 'e-' + 3);\r\n            }\r\n            else {\r\n                charr[i] = \"\" + charr[i];\r\n            }\r\n        }\r\n\r\n        return getShuffle(charr);\r\n\r\n        //make same pattern numbers\r\n        //create digits matching last numbers, first numbers in the range\r\n        //mix some other random numbers\r\n        //select three wrong random numbers out of it\r\n        // shugffle the answer with these random numbers\r\n\r\n    }\r\n\r\n\r\n    let getRandomByRules = function (datarule) {\r\n        let rnd;\r\n        //console.log(\"datfa rule is:\" + JSON.stringify(datarule));\r\n        //  rnd = getRandom(1, 99)\r\n        let min, max;\r\n        //min = Number(min);\r\n        //max = Number(max);\r\n        if (datarule === undefined) {\r\n            min = 1;\r\n            max = 99;\r\n            rnd = getRandom(1, 99);\r\n            return rnd;\r\n        }\r\n        if (datarule.values) {\r\n            rnd = datarule.values[getRandom(0, datarule.values.length - 1)];\r\n            return rnd;\r\n        }\r\n        else if (datarule.rng) {\r\n            min = datarule.rng[0];\r\n            max = datarule.rng[1];\r\n            rnd = getRandom(min, max);\r\n        }\r\n        else {\r\n            min = 1;\r\n            max = 99;\r\n            rnd = getRandom(1, 99);\r\n            return rnd;\r\n        }\r\n\r\n        if (datarule.eqn && datarule.eqn != \"\") {\r\n            if (datarule.eqn != \"n\") {\r\n                // return rnd;\r\n                // }\r\n                // else {\r\n                /*\r\n                let evObjMini = new TapDigit.Evaluator();\r\n                let equationmini = datarule.eqn;\r\n                let datarulemini = JSON.parse(JSON.stringify(datarule));\r\n             // if (equationmini.indexOf(\"/\") > 0) {\r\n               //     let divnum = Number(equationmini.split(\"/\")[1]);\r\n                //    datarulemini.rng[1] = Math.round(datarulemini.rng[1] / divnum);\r\n                //    equationmini = equationmini.replace(\"/\", \"*\");\r\n               // }\r\n               \r\n                datarulemini.eqn = \"\";\r\n                let dataruleobj = {};\r\n                dataruleobj[\"n\"] = datarulemini;\r\n                evObjMini.evaluate(equationmini, dataruleobj);\r\n                let ctxData = evObjMini.data();\r\n                let results = evObjMini.results();\r\n                console.log(\"random #:\" + JSON.stringify(results));\r\n                let myvl = results.main.Result;\r\n                //  rnd = getRandom(1, 99)\r\n                return myvl;\r\n                */\r\n\r\n                // debugger;\r\n                let newdivchkeqn, neweqn, startNum;\r\n\r\n                ////////////////added for decimals /////////////\r\n\r\n                // let dcntmin = countDecimals(min);\r\n                // let dcntmax = countDecimals(max);\r\n                let dcntrnd = countDecimals(rnd);\r\n\r\n                let dmfactor = 0;\r\n\r\n                /*\r\n                                if (dcntmin > 0 || dcntmax > 0) {\r\n                                    if (dcntmax > dcntmin) {\r\n                                        dmfactor = Math.pow(10, dcntmax);\r\n                                    }\r\n                                    else {\r\n                                        dmfactor = Math.pow(10, dcntmin);\r\n                                    }\r\n                                }\r\n                */\r\n\r\n                if (dcntrnd > 0) {\r\n                    dmfactor = Math.pow(10, dcntrnd);\r\n                }\r\n\r\n                if (dmfactor != 0) {\r\n                    // max = max * dmfactor;\r\n                    // min = min * dmfactor;\r\n                    rnd = rnd * dmfactor;\r\n                }\r\n                ////////////////added for decimals /////////////\r\n                startNum = rnd;\r\n                rndNext = startNum;\r\n                //init check for start number\r\n                if (datarule.eqn.indexOf(\"/\") > 0) {\r\n                    newdivchkeqn = datarule.eqn.replace(/(\\/)/g, function replacer(match, $1) {\r\n                        return \"*\" + \"\";\r\n                    });\r\n                    neweqn = newdivchkeqn.replace(/(n)/g, function replacer(match, $1) {\r\n                        return rnd + \"\";\r\n                    });\r\n                    rnd = eval(neweqn);\r\n\r\n                    /*\r\n                    while (eval(neweqn) !== 0) {\r\n                        if (rnd < max) {\r\n                            rnd = rnd + 1;\r\n                            if (rnd == startNum) break;\r\n                            ////////////////////////////////////\r\n                            neweqn = newdivchkeqn.replace(/(n)/g, function replacer(match, $1) {\r\n                                return rnd + \"\";\r\n                            });\r\n                            ////////////////////////////////////\r\n                        }\r\n                        else if (rnd == max) {\r\n                            rnd = min;\r\n                            if (rnd == startNum) break;\r\n                            /////////////////////////////////////////\r\n                            neweqn = newdivchkeqn.replace(/(n)/g, function replacer(match, $1) {\r\n                                return rnd + \"\";\r\n                            });\r\n\r\n                        }\r\n                    }  //end while\r\n                    ///////////////////////////////////////////\r\n                    if (eval(neweqn) !== 0) {\r\n                        //alret no match\r\n                    }\r\n                    */\r\n                }  //end division check\r\n                else {  //other than division\r\n                    neweqn = datarule.eqn.replace(/(n)/g, function replacer(match, $1) {\r\n                        return rnd + \"\";\r\n                    });\r\n                    // console.log(\"neweqn:\" + JSON.stringify(neweqn));\r\n                    rnd = eval(neweqn);\r\n                }\r\n                // console.log(\"dmfactor:\" + dmfactor);\r\n                // console.log(\"rnd:\" + JSON.stringify(rnd));\r\n\r\n                if (dmfactor != 0) {\r\n                    rnd = Number(rnd / dmfactor);\r\n                    if (String(rnd).split(\".\").length == 1) {\r\n                        return rnd.toFixed(2)\r\n                    }\r\n                    else {\r\n                        return rnd;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }  //data rule eqn exists\r\n       // console.log(\"rnd:\" + JSON.stringify(rnd));\r\n        return rnd;\r\n    }\r\n\r\n    let countDecimals = function (value) {\r\n        if (!isNaN(value)) {\r\n            if (Math.floor(value) === value) return 0;\r\n        }\r\n        return value.toString().split(\".\")[1] ? value.toString().split(\".\")[1].length : 0 || 0;\r\n\r\n    }\r\n\r\n    let getRandom = function (min, max) {\r\n        //avoid primes\r\n        //  min = Number(min);\r\n        //  max = Number(max);\r\n        let dcntmin = countDecimals(min);\r\n        let dcntmax = countDecimals(max);\r\n        let dmfactor = 0;\r\n\r\n        if (dcntmin > 0 || dcntmax > 0) {\r\n            if (dcntmax > dcntmin) {\r\n                dmfactor = Math.pow(10, dcntmax);\r\n            }\r\n            else {\r\n                dmfactor = Math.pow(10, dcntmin);\r\n            }\r\n        }\r\n\r\n        if (dmfactor != 0) {\r\n            max = Number(max) * dmfactor;\r\n            min = Number(min) * dmfactor;\r\n        }\r\n        else {\r\n            max = Number(max);\r\n            min = Number(min);\r\n        }\r\n\r\n        let rnd = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        // while (primes[rnd]) {\r\n        //     rnd = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        // }\r\n\r\n        if (dmfactor != 0) {\r\n            rnd = Number(rnd / dmfactor);\r\n            if (String(rnd).split(\".\").length == 1) {\r\n                return rnd.toFixed(2)\r\n            }\r\n            else {\r\n                return rnd;\r\n            }\r\n        }\r\n        return rnd;\r\n    };\r\n\r\n    let getShuffle = function (array) {\r\n        //pick randomly from shuffle on datarulesa\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    let shuffleArray = function (array) {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    return {\r\n        getRandom: getRandom,\r\n        getRandomByRules: getRandomByRules,\r\n        getRandomChoices: getRandomChoices,\r\n        getShuffle: getShuffle,\r\n        setPrimes: setPrimes,\r\n        countDecimals: countDecimals,\r\n        getRandomOperator: getRandomOperator,\r\n        trm: trm\r\n    }\r\n};"]}